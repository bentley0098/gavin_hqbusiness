{"version":3,"sources":["components/Alerts/Alerter.jsx","components/Navigation.jsx","components/Footer.jsx","components/Home.jsx","components/Tasks/returnTasks.js","components/Logos/PDFLogo.png","components/excelExport.js","components/Tasks/NewTask.jsx","components/Tasks/MultiEdit.jsx","components/Tasks/HoursEstimate.jsx","components/Tasks/Summary.jsx","components/Tasks/LoadDataSource.js","components/Tasks/Tasks.jsx","components/Support/SupportSummary.jsx","components/Support/QuickSupport.jsx","components/Report/components1/Closed.jsx","components/Report/components1/Reports.jsx","components/Report/components1/ReportMenu.jsx","components/Report/components1/Schedule.jsx","components/Report/Report1.js","components/Alerts/Errors.jsx","components/Products/NewVersion.jsx","components/Products/Products.jsx","components/Customers/EditList.jsx","components/Customers/Customers.jsx","components/Login/HQicon.ico","components/Login/Login.js","App.js","useToken.js","reportWebVitals.js","index.js"],"names":["getCount","fetch","then","response","json","Alerter","React","memo","props","useState","countNotification","setCountNotification","show","setShow","showAlert","setShowAlert","alerts","setAlerts","showAlertList","data","setCount","count","errorCount","setErrorCount","useEffect","setTimeout","undefined","history","useHistory","onRowDoubleClick","useCallback","rowProps","window","location","pathname","reload","push","localStorage","setItem","JSON","stringify","onRenderRow","onDoubleClick","event","onRowClick","class","onClick","effect","Effect","SCALE","className","Toast","onClose","style","width","height","Header","Body","idProperty","columns","name","header","defaultFlex","type","dataSource","minHeight","margin","theme","Alert","variant","dismissible","closeLabel","withRouter","tokenString","sessionStorage","getItem","Username","parse","username","to","removeItem","Footer","Home","getHistory","taskID","addNote","note","UserID","Minutes","requestOptions","method","headers","body","Notes","Task","userid","minutes","updateTask","taskObject","customerName","customerCode","departmentCode","userId","Company_Name","Account","Department","ActionByUserID","Issue_No","Details","Area","Reference2","Application","Reference","Contact","Reference3","Estimate","Priority","Invoice","DueDate","Requested","User","addNewTask","newTaskNo","CustomerName","CustomerCode","newDetails","newPriority","dueDate","reqDate","user","userID","ref1","contact","ref2","notes","estimate","invoice","urgent","ReqDate","Reference1","Urgent","getNewTaskID","a","newtaskID","returnCustomers","customers","returnDepartments","departments","returnUsers","id","thisTask","reasons","openHistory","makeUrgent","taskId","input","closeItem","itemId","string","itemID","downloadBlob","blob","fileName","link","document","createElement","url","URL","createObjectURL","setAttribute","position","visibility","appendChild","click","removeChild","HQDetails","NewTask","currentUserObj","filterUser","UserId","currentDepFilter","filterDepartment","currentCustFilter","filterCustomer","userToken","setDepartments","setCustomers","users","setUsers","mounted","showNewTask","setShowNewTask","fortnight","Date","setDate","getDate","setDueDate","setReqDate","setNewDetails","setNewTaskNo","newCustomer","setNewCustomer","newDepartment","setNewDepartment","newUser","setNewUser","newRef1","setNewRef1","newContact","setNewContact","newRef2","setNewRef2","newNotes","setNewNotes","newInvoice","setNewInvoice","newEstimate","setNewEstimate","newTaskPriority","setNewTaskPriority","setUrgent","emailBody","setEmailBody","handleCloseNewTask","setInputList","item","onSubmitNewTask","newDueDate","moment","format","newReqDate","DepToAdd","CustToAdd","Code","task","alert","onTaskCreate","inputList","forEach","e","details","addItem","nextTaskNum","thisDueDate","textToCopy","navigator","clipboard","isSecureContext","writeText","textArea","value","left","top","focus","select","Promise","res","rej","execCommand","remove","copyToClipboard","catch","console","log","handleAddClick","OverlayTrigger","placement","overlay","Tooltip","Button","getElementById","Modal","onHide","size","closeButton","Title","Form","Row","Col","Group","controlId","Control","as","onChange","target","map","customer","index","department","rows","placeholder","marginTop","xs","Label","selected","date","dateFormat","calendarStartDay","Check","inline","label","display","x","i","list","handleInputChange","length","splice","handleRemoveClick","right","open","MultiEdit","showMultiEdit","setShowMultiEdit","handleCloseMultiEdit","tempPriority","setTempPriority","tempDueDate","setTempDueDate","editIsDisabled","disabled","selectedIds","Object","keys","key","duedate","newduedate","tasks","priority","editMultiple","CustomizedAxisTick","this","y","payload","stroke","transform","dy","textAnchor","fill","PureComponent","HoursEstimate","estimateGrid","userData","setUserData","loading","setLoading","color","ariLabel","BarChart","CartesianGrid","XAxis","dataKey","interval","tick","YAxis","angle","Bar","maxBarSize","Summary","r1","setR1","r2","setR2","r3","setR3","w1","setW1","w2","setW2","w3","setW3","s1","setS1","s2","setS2","s3","setS3","g1","setG1","g2","setG2","g3","setG3","n1","setN1","n2","setN2","n3","setN3","fullCount","setFullCount","userSource","p1","p2","p3","getDataSource","priorities","p","result","c","All","maxWidth","defaultSortInfo","dir","LoadDataSource","showingClosed","filterCustCode","search","taskAmount","Search","filterPriority","isShowClosed","urgentOnly","newDataSource","rowClassName","State","itemRowClassName","Complete","Tasks","title","AllCustomers","AllDepartments","AllUsers","setDataSource","itemDataSource","setItemDataSource","setTaskAmount","setFilterUser","setFilterPriority","setFilterCustomer","setFilterDepartment","setShowingClosed","setUrgentOnly","searchString","setSearchString","reLoadDataExt","Customer_Code","setSelected","gridRef","setGridRef","historyRef","setHistoryRef","noteValue","setNoteValue","historyMinutes","setHistoryMinutes","setTaskID","setHistory","updateDueDate","setUpdateDueDate","updateReqDate","setUpdateReqDate","taskToUpdate","setTaskToUpdate","editCustomer","setEditCustomer","editDepartment","setEditDepartment","editUser","setEditUser","departmentValue","setDepartmentValue","tasksUser","setTasksUser","closedStatus","setClosedStatus","showCloseTask","setShowCloseTask","handleClose","setSelectedItems","getSelectedTask","j","ActionBy","taskDate","dataSourceArray","onSubmit","selectedItems","setReasons","reasonToClose","setReasonToClose","closingMinutes","setClosingMinutes","timeSpent","setTimeSpent","handleCloseCloseTask","handleShowCloseTask","TimeSpent","returnReasons","onSelectionChange","onSelectionItemChange","minWidth","sort","b","showPrompt","setShowPrompt","handleClosePrompt","current","toString","replace","wb","Sheets","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","exportCSV","gridData","doc","jsPDF","closedIndex","urgentIndex","p1Index","bodyData","Customer","Updated","ActionByUsername","Owner_Name","P","rowData","formatDate","headerText","autoTable","styles","fontSize","headStyles","fillColor","head","didParseCell","row","cell","fontStyle","raw","didDrawPage","setFontSize","setTextColor","PDFLogo","addImage","text","settings","docName","titleDate","save","exportPDF","handle","marginRight","marginLeft","checkboxColumn","backdrop","Margin","reOpenTask","totalTime","Time","Math","round","pageSize","internal","pageWidth","getWidth","splitTextToSize","startY","exportHistoryPDF","Tabs","onSelect","k","Tab","eventKey","editable","UserName","prevTask","defaultVisible","Reason","reason","closingNote","reasonCode","closeTask","Reference4","SupportSummary","returnSupportSummary","summary","QuickSupport","AllReasons","setCustomer","setDetails","selectedReason","setSelectedReason","setMinutes","showOther","setShowOther","phone","setPhone","email","setEmail","remote","setRemote","siteVisit","setSiteVisit","outOfHours","setOutOfHours","validated","setValidated","formRef","useRef","handleReset","reset","currentCustomer","marginBottom","ref","backgroundColor","support","SupportCode","Phone","Email","Site","Remote","OutOfHours","addQuickSupport","Closed","tomorrow","startDate","setStartDate","endDate","setEndDate","LoadData","sDate","eDate","getClosedTasks","selectsStart","selectsEnd","minDate","DateCompleted","DaysToComplete","exportClosedPDF","Reports","selectedChart","chartLoaded","setLoadingUser","chartType","setChartType","setData","getTimeSpent","report","getUserTimeSpent","temp","ReportMenu","breakpoint","iconShape","icon","pushNewWeek","dataArray","number","weekDay","curr","first","getDay","newest","Week","Richard","Wesley","Stephen","Neil","Gavin","Hours","Schedule","graphData","setGraphData","weekCount","ResponsiveContainer","Legend","Report1","path","exact","component","returnErrors","code","returnAlerts","submitErrors","status","detailsArray","Status","processErrors","Errors","errorList","setErrorList","setCurrentCustomer","reLoadGrid","Customer_Name","ErrorCount","NewVersion","isDisabled","product","ProductID","version","setVersion","sql","setSQL","comment","setComment","productID","Version","addUpdateHeader","updateId","UpdateId","Comment","addUpdateDetail","Sql","addUpdateSQL","reLoad","ProductName","returnProductGrid","Products","noSelected","MailingList","ProductURL","currentProduct","setCurrentProduct","products","setProducts","href","EditList","setList","Web_List_Placement","one","two","three","four","five","six","seven","eight","nine","ten","updateCustomerList","getTopSelected","Customers","customerSupportData","setCustomerSupportData","selectedCustomers","setSelectedCustomers","gridStyle","Button1","loginUser","credentials","Login","setToken","setUserName","password","setPassword","handleSubmit","checkDueDate","preventDefault","token","src","HQicon","alt","constrolId","App","getToken","useToken","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.64711ce5.chunk.js","sourcesContent":["import React, {useState, useEffect, useCallback} from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n//ReactDataGrid.io used for main grid\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\nimport '@inovua/reactdatagrid-community/base.css'\r\nimport '@inovua/reactdatagrid-community/index.css'\r\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\r\n\r\nimport {FaRegBell} from 'react-icons/fa';\r\nimport './alerts.css';\r\n\r\nimport NotificationBadge from 'react-notification-badge';\r\nimport {Effect} from 'react-notification-badge';\r\n\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport Alert from 'react-bootstrap/Alert'\r\n\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst returnAlerts = () => {\r\n  return fetch('/returnAlerts').then(response => {\r\n    return response.json()\r\n  });\r\n}\r\n\r\nconst getCount = () => {\r\n  return fetch('/getErrorCount/0').then(response => {\r\n    return response.json()\r\n  });\r\n}\r\n\r\nconst Alerter = React.memo( props => {\r\n\r\n\r\n    const [ countNotification, setCountNotification ] = useState(0);\r\n    const [show, setShow] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n\r\n    const [alerts, setAlerts] = useState([]);\r\n\r\n    const showAlertList = () => {\r\n        //console.log(\"SHOW ME MY ALERTS\");\r\n        returnAlerts().then((data) => {\r\n          setCount(count + 1);\r\n          setAlerts(data);\r\n          setShow(true);\r\n        });\r\n    }\r\n\r\n    const [count, setCount] = useState(0);\r\n    const [errorCount, setErrorCount] = useState();\r\n\r\n    //const [tempName, setTempName] = useState(\"\");\r\n\r\n    \r\n    useEffect(() => {\r\n      if (count === 0) { // condition for checking if the API call being made is initial one or not.\r\n        getCount().then((data) => {\r\n          //console.log(data[0][\"\"]);\r\n          setErrorCount(data[0][\"\"]);\r\n        });\r\n        setCount(count + 1);\r\n\r\n        //returnAlerts().then((data) => {\r\n        //  setCount(count + 1);\r\n        //  setAlerts(data);\r\n        //});\r\n        //console.log(count);\r\n      } else {\r\n        //console.log(count);\r\n        \r\n        setTimeout(() => {\r\n          setCount(count + 1);\r\n          \r\n          getCount().then((data) => {  \r\n            // Check if count has changed\r\n            if(data[0][\"\"]>errorCount && errorCount!==undefined) {\r\n              setErrorCount(data[0][\"\"]);\r\n              // Show popup for new error\r\n              setCountNotification(countNotification+1);\r\n            }\r\n          });\r\n          /* -------- OLD WAY -------- */\r\n              /*\r\n          returnAlerts().then((data) => {\r\n            setCount(count + 1);\r\n            clearTimeout(timer);\r\n            //console.log(test);\r\n\r\n            if(alerts!==[]) {\r\n                            \r\n              //loop through 'alerts', check against data before setting new data as alerts\r\n\r\n              //console.log(data);\r\n              //console.log(alerts.length);\r\n\r\n              if(alerts.length<data.length && count>3){\r\n               \r\n                setTempName(\"New_Customer_in_HQS_ERRORS\"); \r\n                \r\n                setShowAlert(true);\r\n              }\r\n\r\n              for(let i=0; i<alerts.length; i++) {\r\n                for(let j=0; j<data.length; j++) {\r\n                  if(alerts[i].CustomerCode===data[j].CustomerCode){\r\n                    //same customer code\r\n                    if(alerts[i].ErrorCount<data[j].ErrorCount){\r\n                      //alert(\"You have a new error for: \" + data[j].Customer_Name);\r\n                      setTempName(data[j].Customer_Name);\r\n                      //setShowAlert(true);\r\n                      setCountNotification(countNotification+1);\r\n                      \r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            \r\n            }\r\n            */\r\n            \r\n\r\n            //console.log(\"ALERT CHECK\");\r\n            //setAlerts(data);\r\n          //});\r\n        }, 5000);\r\n      }\r\n\r\n      //console.log(alerts);\r\n    }, [count, countNotification, errorCount]);\r\n    \r\n    const theme = 'default-dark';\r\n    const columns = [\r\n      {name: 'Customer_Name', header: 'Company', defaultFlex:2, type: 'string'},\r\n      {name: 'ErrorCount', header: 'Errors', defaultFlex:1, type: 'number'}\r\n    ]\r\n    const gridStyle = { minHeight:250, margin:5 }\r\n    \r\n\r\n    const history = useHistory();\r\n\r\n\r\n    const onRowDoubleClick = useCallback((rowProps) => { \r\n      \r\n      if (window.location.pathname=='/Errors') {\r\n        window.location.reload(false);\r\n      } else {\r\n        history.push(\"/Errors\");\r\n      }\r\n      localStorage.setItem('CustomerErrorCheck', JSON.stringify(rowProps.data));\r\n      setShow(false);\r\n    }, [history]);\r\n\r\n    //Double click to bring up Error List\r\n    const onRenderRow = useCallback((rowProps) => {\r\n      const { onDoubleClick } = rowProps;      \r\n      \r\n      rowProps.onDoubleClick = (event) => {\r\n        onRowDoubleClick(rowProps);\r\n        if (onDoubleClick) {\r\n          onDoubleClick(event);\r\n        }\r\n      };\r\n      \r\n    }, [onRowDoubleClick])\r\n    \r\n    const onRowClick = useCallback((rowProps, event) => {\r\n      //Use this function if single click is needed\r\n    }, [])\r\n\r\n\r\n    \r\n    return(\r\n        <>\r\n        <Link class=\"nav-link\" onClick={() => {\r\n          showAlertList();\r\n          setCountNotification(0);\r\n        }}>\r\n          <NotificationBadge count={countNotification} effect={Effect.SCALE} />\r\n          <FaRegBell />\r\n        </Link>\r\n\r\n\r\n        <div className=\"alerts-toast\">\r\n            <Toast onClose={() => setShow(false)} show={show} style={{width:'330px', height: '330px'}} >\r\n          <Toast.Header>\r\n            <strong className=\"me-auto\">Alerts</strong>\r\n          </Toast.Header>\r\n          <Toast.Body>\r\n          <ReactDataGrid \r\n                idProperty=\"id\"\r\n                columns={columns}\r\n                dataSource={alerts}\r\n                style={gridStyle}\r\n                theme={theme}\r\n                onRenderRow={onRenderRow}\r\n                onRowClick={onRowClick}\r\n              />\r\n          </Toast.Body>\r\n        </Toast> \r\n        </div>\r\n\r\n        { \r\n            showAlert &&   \r\n            <div className={'alert-notification'}>\r\n                <Alert key={1} onClose={() => setShowAlert(false)} variant={'danger'} dismissible closeLabel={'Dismiss'}>\r\n                There is a new error!\r\n                </Alert>\r\n            </div>\r\n        }\r\n        \r\n        </>\r\n    )\r\n})\r\n\r\nexport default Alerter;","import React from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\n\r\n\r\nimport './components.css'\r\nimport Alerter from \"./Alerts/Alerter\";\r\n\r\nfunction Navigation(props) {\r\n  const tokenString = sessionStorage.getItem('token');\r\n  const userToken = JSON.parse(tokenString);\r\n  const Username = userToken.username;\r\n\r\n  const logout = () => {\r\n    sessionStorage.removeItem('token');\r\n    window.location.reload(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"navigation\">\r\n      <nav class=\"navbar navbar-expand navbar-dark grid-bg-colour\">\r\n        <div class=\"container\">\r\n          <Link class=\"navbar-brand\" to=\"/\">\r\n            {Username}'s HQ BUSINESS\r\n          </Link>\r\n          \r\n          \r\n          <div>\r\n            <ul class=\"navbar-nav ml-auto\">\r\n              <li\r\n                class={`nav-item  ${\r\n                  props.location.pathname === \"/\" ? \"active\" : \"\"\r\n                }`}\r\n              >\r\n                <Link class=\"nav-link\" to=\"/\">\r\n                  Tasks\r\n                  <span class=\"sr-only\">(current)</span>\r\n                </Link>\r\n              </li>\r\n\r\n              <li\r\n                class={`nav-item  ${\r\n                  props.location.pathname === \"/Report1\" ? \"active\" : \"\"\r\n                }`}\r\n              >\r\n                <Link class=\"nav-link\" to=\"/Report1\">\r\n                    Reports\r\n                </Link>\r\n              </li>\r\n\r\n              <li\r\n                class={`nav-item  ${\r\n                  props.location.pathname === \"/Support\" ? \"active\" : \"\"\r\n                }`}\r\n              >\r\n                <Link class=\"nav-link\" to=\"/Support\">\r\n                    Support\r\n                </Link>\r\n              </li>\r\n\r\n              <li\r\n                class={`nav-item  ${\r\n                  props.location.pathname === \"/Products\" ? \"active\" : \"\"\r\n                }`}\r\n              >\r\n                <Link class=\"nav-link\" to=\"/Products\">\r\n                  Products\r\n                </Link>\r\n              </li>\r\n\r\n              <li\r\n                class={`nav-item  ${\r\n                  props.location.pathname === \"/Customers\" ? \"active\" : \"\"\r\n                }`}\r\n              >\r\n                <Link class=\"nav-link\" to=\"/Customers\">\r\n                  Customers\r\n                </Link>\r\n              </li>\r\n\r\n              <li>\r\n                <Alerter />\r\n              </li>\r\n              <li>\r\n                <div className=\"spacer\"></div>\r\n              </li>\r\n              <li\r\n                class={`nav-item  ${\r\n                  props.location.pathname === \"/Login\" ? \"active\" : \"\"\r\n                }`}\r\n              >\r\n                <Link class=\"nav-link\" to=\"/\" onClick={logout}>\r\n                    Sign Out\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n            \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Navigation);","import React from \"react\";\r\nimport './components.css'\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <footer class=\"py-3 grid-bg-colour fixed-bottom\">\r\n        <div class=\"container\">\r\n          <p class=\"m-0 text-center text-white\">\r\n            Copyright &copy; HQ Software 2021, v1.85\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer; ","import React from \"react\";\r\n\r\nfunction Home() {\r\n  const tokenString = localStorage.getItem('token');\r\n  const userToken = JSON.parse(tokenString);\r\n  const Username = userToken.username;\r\n        \r\n  \r\n  return (\r\n    <div className=\"home\">\r\n      <div class=\"container\">\r\n        <div class=\"row align-items-center my-5\">\r\n          \r\n          <div class=\"col-lg-5\">\r\n            <h1 class=\"font-weight-light\">Welcome {Username}</h1>\r\n            <p>\r\n              Lorem Ipsum is simply dummy text of the printing and typesetting\r\n              industry. Lorem Ipsum has been the industry's standard dummy text\r\n              ever since the 1500s, when an unknown printer took a galley of\r\n              type and scrambled it to make a type specimen book.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;","//export function getTasks() {\r\n//    return fetch('/queryTasks')\r\n//      .then(data => data.json())\r\n//  }\r\n\r\nexport function getHistory(taskID) {\r\n  return fetch('/taskHistory/' + taskID)\r\n    .then(data => data.json())\r\n}\r\n\r\nexport function addNote(note, taskID, UserID, Minutes) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      Notes: note,\r\n      Task: taskID,\r\n      userid: UserID,\r\n      minutes: Minutes\r\n    })\r\n  }\r\n  return fetch('/addHistory/', requestOptions)\r\n   \r\n}\r\n\r\nexport function updateTask(taskObject, customerName, customerCode, departmentCode, userId) {\r\n\r\n  if(!customerName) {\r\n    customerName=taskObject.Company_Name;\r\n    customerCode=taskObject.Account;\r\n  }\r\n  if(!departmentCode) {\r\n    departmentCode = taskObject.Department;\r\n  }\r\n  if(!userId) {\r\n    userId = taskObject.ActionByUserID;\r\n  }\r\n  //console.log(taskObject);\r\n  const requestOptions = {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json'},\r\n    body: JSON.stringify({\r\n      Task : taskObject.Issue_No,\r\n      Details: taskObject.Details,\r\n      Notes: taskObject.Notes,\r\n      Area: taskObject.Reference2,\r\n      Application: taskObject.Reference,\r\n      Contact: taskObject.Reference3,\r\n      Estimate: taskObject.Estimate,\r\n      Priority: taskObject.Priority,\r\n      Invoice: taskObject.Invoice,\r\n      DueDate: taskObject.DueDate,\r\n      Requested: taskObject.Requested,\r\n      Company_Name: customerName,\r\n      Account: customerCode,\r\n      Department: departmentCode,\r\n      User: userId\r\n    })\r\n  }\r\n  return fetch('/updateTask/', requestOptions)\r\n}\r\n\r\n\r\nexport function addNewTask(newTaskNo, CustomerName,CustomerCode, newDetails, newPriority, dueDate, reqDate, departmentCode, user, userID, ref1, contact, ref2, notes, estimate, invoice, urgent) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      Details: newDetails,\r\n      Task: newTaskNo,\r\n      CustomerName: CustomerName,\r\n      CustomerCode: CustomerCode,\r\n      Priority: newPriority,\r\n      DueDate: dueDate,\r\n      ReqDate: reqDate,\r\n      Department: departmentCode,\r\n      User: user,\r\n      Reference1: ref1,\r\n      Contact: contact,\r\n      Reference2: ref2,\r\n      Notes: notes,\r\n      Estimate: estimate,\r\n      Invoice: invoice,\r\n      UserID: userID,\r\n      Urgent: urgent\r\n    })\r\n  }\r\n  return fetch('/addNewTask/', requestOptions)\r\n   \r\n}\r\n\r\nexport async function getNewTaskID() {\r\n  const response = await fetch('/newTaskId');\r\n  const newtaskID = await response.json();\r\n  return newtaskID\r\n}\r\n\r\nexport async function returnCustomers() {\r\n  const response = await fetch('/returnCustomers');\r\n  const customers = await response.json();\r\n  return customers\r\n}\r\n\r\nexport async function returnDepartments() {\r\n  const response = await fetch('/returnDepartments');\r\n  const departments = await response.json();\r\n  return departments\r\n}\r\n\r\nexport async function returnUsers() {\r\n  const response = await fetch('/returnUsers');\r\n  const departments = await response.json();\r\n  return departments\r\n}\r\n\r\nexport async function getSelectedTask(id) {\r\n  const response = await fetch('/returnSelectedTask/' + id);\r\n  const thisTask = await response.json();\r\n  return thisTask\r\n}\r\n    \r\nexport async function returnReasons() {\r\n  const response = await fetch('/returnReasons');\r\n  const reasons = await response.json();\r\n  return reasons\r\n}\r\n\r\nexport function closeTask(taskID, reasonCode, minutes) {\r\n  var date = new Date();\r\n  \r\n  const requestOptions = {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json'},\r\n    body: JSON.stringify({\r\n      Task : taskID,\r\n      Code: reasonCode,\r\n      Minutes: minutes,\r\n      Date: date\r\n    })\r\n  }\r\n  return fetch('/closeTask/', requestOptions)\r\n}\r\n\r\nexport function editMultiple( selectedIds, newPriority, newduedate ) {\r\n  let string = JSON.stringify(selectedIds);\r\n  //console.log(JSON.parse(string));\r\n  //console.log(newPriority);\r\n  const requestOptions = {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json'},\r\n    body: JSON.stringify({\r\n      tasks: string,\r\n      priority: newPriority,\r\n      duedate: newduedate\r\n    })\r\n  }\r\n\r\n  //console.log(requestOptions);\r\n  return fetch('/editMultiple', requestOptions)\r\n}\r\n\r\nexport function openHistory(newTaskNo, UserID) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json'},\r\n    body: JSON.stringify({\r\n      taskID: newTaskNo,\r\n      userid: UserID\r\n    })\r\n  }\r\n\r\n  return fetch('/openHistory', requestOptions)\r\n}\r\n\r\nexport function reOpenTask(task) {\r\n  const requestOptions = {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json'},\r\n    body: JSON.stringify({\r\n      taskID: task\r\n    })\r\n  }\r\n  return fetch('/reOpenTask', requestOptions)\r\n}\r\n\r\n\r\nexport const getSummary = (userID, priority) =>{\r\n  return fetch('/getSummary/' + userID + '&' + priority).then(response => {\r\n      return response.json()\r\n  });\r\n}\r\n\r\nexport const getTaskCount = () =>{\r\n  return fetch('/getTaskCount').then(response => {\r\n      return response.json()\r\n  });\r\n}\r\n\r\nexport function makeUrgent (taskId, input) {\r\n  const requestOptions = {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json'},\r\n    body: JSON.stringify({\r\n      taskID: taskId,\r\n      input: input\r\n    })\r\n  }\r\n  return fetch('/makeUrgent', requestOptions)\r\n}\r\n\r\nexport function getItems (taskId) {\r\n  return fetch('/getItems/' + taskId).then(response => {\r\n    return response.json()\r\n  });\r\n}\r\n\r\nexport function closeItem (itemId, input) {\r\n  let string = JSON.stringify(itemId);\r\n \r\n  const requestOptions = {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json'},\r\n    body: JSON.stringify({\r\n      itemID: string,\r\n      input: input\r\n    })\r\n  }\r\n  return fetch('/closeItem', requestOptions)\r\n}\r\n\r\nexport function getTimeSpent (taskId) {\r\n  return fetch('/getTimeSpent/' + taskId).then(response => {\r\n    return response.json()\r\n  });\r\n}","export default __webpack_public_path__ + \"static/media/PDFLogo.d3482e1c.png\";","import jsPDF from 'jspdf'\r\nimport 'jspdf-autotable'\r\nimport PDFLogo from './Logos/PDFLogo.png'\r\n\r\nimport * as XLSX from 'xlsx';\r\n\r\nimport moment from 'moment'\r\n\r\nexport const exportCSV = (gridRef) => {\r\n    //const columns = gridRef.current.visibleColumns;\r\n\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    \r\n    // Reformatting GridRef for inputing into csv file\r\n    gridRef.current.data.map((data) => {\r\n      data.Details = data.Details.toString().replace(',','');\r\n      data[\"Last Comment\"] = data[\"Last Comment\"].toString().replace(',','');\r\n      data.Details = data.Details.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n      return null;\r\n    });\r\n\r\n    //const header = columns.map((c) => c.name).join(',');\r\n    //const rows = gridRef.current.data.map((data) => columns.map((c) => data[c.id]).join(','));\r\n    //const contents = [header].concat(rows).join('\\n');\r\n\r\n    const ws = XLSX.utils.json_to_sheet(gridRef.current.data);\r\n    const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n    const blob = new Blob([excelBuffer], {type: fileType});\r\n\r\n    //const blob = new Blob([contents], { type: 'text/csv;charset=utf-8;' });\r\n    downloadBlob(blob);\r\n};\r\n\r\n\r\nconst downloadBlob = (blob, fileName = 'HQB_TASKS.xlsx') => {\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    \r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', fileName);\r\n    link.style.position = 'absolute';\r\n    link.style.visibility = 'hidden';\r\n  \r\n    document.body.appendChild(link);\r\n  \r\n    link.click();\r\n  \r\n    document.body.removeChild(link);\r\n};\r\n\r\n\r\nexport function  exportPDF(gridData, customer) {\r\n  var doc = new jsPDF('landscape', 'pt');\r\n  var closedIndex = [];\r\n  var urgentIndex = [];\r\n  var p1Index = [];\r\n  \r\n  //console.log(gridData.current.data);\r\n  var bodyData = [];\r\n  if(customer.Customer_Code===0){\r\n    bodyData= [[\r\n      gridData.current.data[0].Task, \r\n      gridData.current.data[0].Customer,\r\n      gridData.current.data[0].Details, \r\n      gridData.current.data[0].Area, \r\n      gridData.current.data[0].Application,\r\n      gridData.current.data[0].Requested,\r\n      gridData.current.data[0].Contact,\r\n      gridData.current.data[0][\"Last Comment\"],\r\n      gridData.current.data[0].Updated,\r\n      gridData.current.data[0].DueDate,\r\n      gridData.current.data[0].Invoice,\r\n      gridData.current.data[0].Priority,\r\n      gridData.current.data[0].ActionByUsername,\r\n      gridData.current.data[0].Owner_Name\r\n    ]];\r\n  } else {\r\n    bodyData= [[\r\n      gridData.current.data[0].Task, \r\n      gridData.current.data[0].Details, \r\n      gridData.current.data[0].Area, \r\n      gridData.current.data[0].Application,\r\n      gridData.current.data[0].Requested,\r\n      gridData.current.data[0].Contact,\r\n      gridData.current.data[0][\"Last Comment\"],\r\n      gridData.current.data[0].Updated,\r\n      gridData.current.data[0].DueDate,\r\n      gridData.current.data[0].Invoice,\r\n      gridData.current.data[0].Priority,\r\n      gridData.current.data[0].ActionByUsername,\r\n      gridData.current.data[0].Owner_Name\r\n    ]];\r\n  }\r\n\r\n  if(gridData.current.data[0].State===\"C\") {\r\n    closedIndex.push(0);\r\n  }\r\n\r\n  if(gridData.current.data[0].Urgent===true) {\r\n    urgentIndex.push(0);\r\n  }\r\n\r\n  if(gridData.current.data[0].P===1) {\r\n    p1Index.push(0);\r\n  }\r\n\r\n  var rowData = [];\r\n  for(let i=1; i<gridData.current.data.length; i++){\r\n    if(customer.Customer_Code===0){\r\n      rowData = [\r\n        gridData.current.data[i].Task, \r\n        gridData.current.data[i].Customer, \r\n        gridData.current.data[i].Details, \r\n        gridData.current.data[i].Area, \r\n        gridData.current.data[i].Application,\r\n        gridData.current.data[i].Requested,\r\n        gridData.current.data[i].Contact,\r\n        gridData.current.data[i][\"Last Comment\"], \r\n        gridData.current.data[i].Updated,\r\n        gridData.current.data[i].DueDate,\r\n        gridData.current.data[i].Invoice,\r\n        gridData.current.data[i].Priority,\r\n        gridData.current.data[i].ActionByUsername,\r\n        gridData.current.data[i].Owner_Name\r\n      ];\r\n    } else {\r\n      rowData = [\r\n        gridData.current.data[i].Task, \r\n        gridData.current.data[i].Details, \r\n        gridData.current.data[i].Area, \r\n        gridData.current.data[i].Application,\r\n        gridData.current.data[i].Requested,\r\n        gridData.current.data[i].Contact,\r\n        gridData.current.data[i][\"Last Comment\"], \r\n        gridData.current.data[i].Updated,\r\n        gridData.current.data[i].DueDate,\r\n        gridData.current.data[i].Invoice,\r\n        gridData.current.data[i].Priority,\r\n        gridData.current.data[i].ActionByUsername,\r\n        gridData.current.data[i].Owner_Name\r\n      ];\r\n    }\r\n\r\n    \r\n    \r\n    if(gridData.current.data[i].State===\"C\") {\r\n      closedIndex.push(i);\r\n    }\r\n\r\n    if(gridData.current.data[i].Urgent===true) {\r\n      urgentIndex.push(i);\r\n    }\r\n\r\n    if(gridData.current.data[i].P===1) {\r\n      p1Index.push(i);\r\n    }\r\n    \r\n    bodyData.push(rowData);\r\n\r\n  }\r\n\r\n  let formatDate = moment(new Date()).format(\"Do MMMM YYYY\"); \r\n  \r\n  let headerText = customer.CustomerName + \" Report    -    \" + formatDate;\r\n\r\n  let header=[];\r\n  if(customer.Customer_Code===0){\r\n    header= ['Task', 'Customer', 'Details', 'Area', 'Section', 'Requested', 'Requestor', 'Status', 'Updated', 'Due Date', 'Invoice', 'P', 'User', 'Owner']\r\n  } else {\r\n    header= ['Task', 'Details', 'Area', 'Section', 'Requested', 'Requestor', 'Status', 'Updated', 'Due Date', 'P', 'User', 'Invoice', 'Owner']\r\n  }\r\n  \r\n  doc.autoTable({\r\n    styles: { fontSize: 8 },\r\n    theme: 'grid',\r\n    headStyles: {fillColor: [55, 55, 55]},\r\n    head: [header],\r\n    body: bodyData,\r\n    didParseCell: function(data) {\r\n      \r\n      for (let i=0; i<closedIndex.length; i++) {\r\n        if(data.row.index===closedIndex[i]){\r\n          data.cell.styles.fillColor= [87, 222, 107]\r\n        }\r\n      }\r\n      for (let i=0; i<urgentIndex.length; i++) {\r\n        if(data.row.index===urgentIndex[i]){\r\n          data.cell.styles.fontStyle= \"bold\";\r\n        }\r\n      }\r\n      for (let i=0; i<p1Index.length; i++) {\r\n        if(data.row.index===p1Index[i] && data.cell.raw===1){\r\n          //console.log(data);\r\n          data.cell.styles.fillColor= [255, 157, 156]\r\n        }\r\n      }\r\n    },\r\n    didDrawPage: function (data) {\r\n      // Header\r\n      doc.setFontSize(18)\r\n      doc.setTextColor(40)\r\n      if (PDFLogo) {\r\n        doc.addImage(PDFLogo, 'png', 20, 20, 46.5, 48, PDFLogo, 'FAST', 0)\r\n      }\r\n      doc.text(headerText, data.settings.margin.left + 50, 50)\r\n\r\n      doc.setFontSize(8)\r\n\r\n     \r\n    },\r\n    margin: { top: 80 }\r\n  })\r\n\r\n  var docName = '';\r\n\r\n  let titleDate = moment(new Date()).format(\"DDMMYYYY\"); \r\n\r\n  if(customer.Customer_Code===0){\r\n    docName = 'HQSoftware_TASKS.pdf';\r\n  } else {\r\n    docName = customer.CustomerName + '_TASKS_' + titleDate\r\n  }\r\n\r\n  doc.save(docName)\r\n}\r\n\r\n\r\nexport function  exportClosedPDF(gridData, customer) {\r\n  var doc = new jsPDF('landscape', 'pt');\r\n  var closedIndex = [];\r\n  \r\n  \r\n\r\n  var bodyData= [[\r\n    gridData.current.data[0].Task, \r\n    gridData.current.data[0].Details, \r\n    gridData.current.data[0].Requested,\r\n    gridData.current.data[0].DateCompleted, \r\n    gridData.current.data[0].DaysToComplete,\r\n    gridData.current.data[0].TimeSpent,\r\n    gridData.current.data[0].ActionByUsername\r\n  ]];\r\n\r\n  if(gridData.current.data[0].State===\"C\") {\r\n    closedIndex.push(0);\r\n  }\r\n\r\n  for(let i=1; i<gridData.current.data.length; i++){\r\n    var rowData = [\r\n    gridData.current.data[i].Task, \r\n    gridData.current.data[i].Details, \r\n    gridData.current.data[i].Requested,\r\n    gridData.current.data[i].DateCompleted, \r\n    gridData.current.data[i].DaysToComplete,\r\n    gridData.current.data[i].TimeSpent,\r\n    gridData.current.data[i].ActionByUsername\r\n    ];\r\n    \r\n    if(gridData.current.data[i].State===\"C\") {\r\n      closedIndex.push(i);\r\n    }\r\n    bodyData.push(rowData);\r\n\r\n  }\r\n\r\n  let formatDate = moment(new Date()).format(\"Do MMMM YYYY\"); \r\n  \r\n  let headerText = customer.CustomerName + \" Closed Tasks    -    \" + formatDate;\r\n\r\n  \r\n  \r\n  doc.autoTable({\r\n    styles: { fontSize: 8 },\r\n    theme: 'grid',\r\n    headStyles: {fillColor: [55, 55, 55]},\r\n    head: [['Task', 'Details', 'Requested', 'Completed', 'Days', 'Time', 'User']],\r\n    body: bodyData,\r\n    didParseCell: function(data) {\r\n      \r\n      for (let i=0; i<closedIndex.length; i++) {\r\n        if(data.row.index===closedIndex[i]){\r\n          data.cell.styles.fillColor= [87, 222, 107]\r\n        }\r\n      }\r\n    },\r\n    didDrawPage: function (data) {\r\n      // Header\r\n      doc.setFontSize(18)\r\n      doc.setTextColor(40)\r\n      if (PDFLogo) {\r\n        doc.addImage(PDFLogo, 'png', 20, 20, 46.5, 48, PDFLogo, 'FAST', 0)\r\n      }\r\n      doc.text(headerText, data.settings.margin.left + 50, 50)\r\n\r\n      doc.setFontSize(8)\r\n\r\n     \r\n    },\r\n    margin: { top: 80 }\r\n  })\r\n\r\n  var docName = '';\r\n\r\n  let titleDate = moment(new Date()).format(\"DDMMYYYY\"); \r\n\r\n  if(customer.Customer_Code===0){\r\n    docName = 'HQSoftware_CLOSEDTASKS.pdf';\r\n  } else {\r\n    docName = customer.CustomerName + '_CLOSEDTASKS_' + titleDate\r\n  }\r\n\r\n  doc.save(docName)\r\n}\r\n\r\nexport function  exportHistoryPDF(gridData, task) {\r\n  var doc = new jsPDF('landscape', 'pt');\r\n  let closedIndex = []\r\n  \r\n  let headerText = task.Issue_No + \"  -  \" + task.Details;\r\n\r\n \r\n  \r\n\r\n  \r\n  let totalTime =gridData.current.data[0].Minutes;\r\n\r\n  var bodyData= [[\r\n    gridData.current.data[0].Username, \r\n    gridData.current.data[0].Time, \r\n    gridData.current.data[0].Notes,\r\n    gridData.current.data[0].Minutes \r\n  ]];\r\n\r\n  if(gridData.current.data[0].State===\"C\") {\r\n    closedIndex.push(0);\r\n  }\r\n\r\n  for(let i=1; i<gridData.current.data.length; i++){\r\n    var rowData = [\r\n      gridData.current.data[i].Username, \r\n      gridData.current.data[i].Time, \r\n      gridData.current.data[i].Notes,\r\n      gridData.current.data[i].Minutes \r\n    ];\r\n    bodyData.push(rowData);\r\n\r\n    totalTime = totalTime + gridData.current.data[i].Minutes;\r\n  }\r\n\r\n  totalTime = Math.round((totalTime/60)*100)/100;\r\n  //let formatDate = moment(new Date()).format(\"Do MMMM YYYY\"); \r\n  \r\n  \r\n\r\n  let minutes = 'Time Spent - ' + totalTime + ' hours';\r\n\r\n  \r\n\r\n  doc.autoTable({\r\n    styles: { fontSize: 8 },\r\n    theme: 'grid',\r\n    headStyles: {fillColor: [55, 55, 55]},\r\n    head: [['User', 'When', 'Notes', 'Minutes']],\r\n    body: bodyData,\r\n    didDrawPage: function (data) {\r\n      // Header\r\n      doc.setFontSize(18)\r\n      doc.setTextColor(40)\r\n      if (PDFLogo) {\r\n        doc.addImage(PDFLogo, 'png', 20, 20, 46.5, 48, PDFLogo, 'FAST', 0)\r\n      }\r\n      //doc.text(headerText, data.settings.margin.left + 50, 50)\r\n      doc.setFontSize(8)\r\n\r\n      doc.setFontSize(18)\r\n      doc.text(headerText, data.settings.margin.left + 50, 30)\r\n      doc.setFontSize(11)\r\n      doc.setTextColor(100)\r\n\r\n      // jsPDF 1.4+ uses getWidth, <1.4 uses .width\r\n      var pageSize = doc.internal.pageSize\r\n      var pageWidth = pageSize.width ? pageSize.width : pageSize.getWidth()\r\n      var text = doc.splitTextToSize(task.Notes, pageWidth - 100, {})\r\n      doc.text(text, data.settings.margin.left + 50, 50)\r\n\r\n      doc.text(minutes, 700, data.settings.margin.left)\r\n\r\n      \r\n\r\n     \r\n    },\r\n    startY: 80\r\n  })\r\n\r\n  var docName = task.Issue_No;\r\n\r\n  //let titleDate = moment(new Date()).format(\"DDMMYYYY\"); \r\n\r\n\r\n  doc.save(docName)\r\n}","import React, {useState, useEffect} from 'react';\r\nimport moment from 'moment'\r\n\r\n\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport DatePicker from 'react-datepicker'\r\n\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\n\r\n\r\nimport {addNewTask, getNewTaskID, returnCustomers, returnDepartments, returnUsers, openHistory} from './returnTasks.js'\r\n\r\nimport {HiOutlineMail} from \"react-icons/hi\";\r\nimport {RiFileAddLine} from \"react-icons/ri\"\r\nimport {BiPlus, BiMinus } from \"react-icons/bi\"\r\n\r\n\r\n\r\n\r\nconst HQDetails={\r\n    'SupportCode' : 0,\r\n    'Customer_Code' : 340,\r\n    'CustomerName' : \"HQ Software\",\r\n    'CustomerCode': 340\r\n}\r\n\r\n\r\nfunction addItem(task, details) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      Details: details,\r\n      taskID: task\r\n    })\r\n  }\r\n  return fetch('/addItem/', requestOptions)\r\n   \r\n}\r\n\r\n\r\n\r\n\r\nconst NewTask = React.memo( props => {\r\n  //console.log(\"NewTask Render\");\r\n  //console.log(props);\r\n  \r\n  const currentUserObj = {\r\n    'UserId': props.filterUser.UserId,\r\n    'Username':  props.filterUser.Username\r\n  }\r\n  const currentDepFilter = props.filterDepartment;\r\n  const currentCustFilter = props.filterCustomer;\r\n  \r\n  //----- GET CURRENT USER -----//\r\n  const tokenString = sessionStorage.getItem('token');\r\n  const userToken = JSON.parse(tokenString);\r\n  const Username = userToken.username;\r\n  const UserID = userToken.userId;\r\n  //-----------//\r\n    //setting departments/users/customers for drop downs\r\n  const [departments, setDepartments] = useState([]);\r\n  const [customers, setCustomers] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n   // Use Effect Hook to load data for the grid when webpage is loaded\r\n   useEffect(() => {\r\n    let mounted = true;\r\n    \r\n    returnCustomers()\r\n      .then(customers => {\r\n        if(mounted) {\r\n          setCustomers(customers)\r\n        }\r\n      })\r\n    returnDepartments()\r\n      .then(departments => {\r\n        if(mounted) {\r\n          setDepartments(departments);\r\n        }\r\n      })\r\n    returnUsers()\r\n      .then(users => {\r\n        if(mounted) {\r\n          setUsers(users)\r\n        }\r\n      })\r\n\r\n    return () => mounted = false;\r\n  }, [])\r\n\r\n//-----NEW TASK-----//  \r\n\r\n    const [showNewTask, setShowNewTask] = useState(false);\r\n    const [showAlert, setShowAlert] = useState(false);\r\n    \r\n    //States inserting new values into the new task created\r\n\r\n    var fortnight = new Date();\r\n    fortnight.setDate(fortnight.getDate()+14);\r\n\r\n    const [dueDate, setDueDate] = useState(fortnight);\r\n    const [reqDate, setReqDate] = useState(new Date());\r\n    const [newDetails, setNewDetails] = useState(\"\");\r\n    const [newTaskNo, setNewTaskNo] = useState();\r\n    const [newCustomer, setNewCustomer] = useState({});\r\n    const [newDepartment, setNewDepartment] = useState({});\r\n    const [newUser, setNewUser] = useState([]);\r\n    const [newRef1, setNewRef1] = useState(\"\");\r\n    const [newContact, setNewContact] = useState(\"\");\r\n    const [newRef2, setNewRef2] = useState(\"\");\r\n    const [newNotes, setNewNotes] = useState(\"\");\r\n    const [newInvoice, setNewInvoice] = useState(\"\");\r\n    const [newEstimate, setNewEstimate] = useState(\"\");\r\n    const [newTaskPriority, setNewTaskPriority] = useState(2);\r\n\r\n    const [urgent, setUrgent] = useState(null);\r\n\r\n    \r\n\r\n    const [emailBody, setEmailBody] = useState(\"\");\r\n\r\n    //Functions to handle show/hide modal\r\n    const handleCloseNewTask = () => { \r\n        setShowNewTask(false); \r\n\r\n        setTimeout(()=> {\r\n          //Resets all values after modal is closed\r\n          var fortnight = new Date();\r\n          fortnight.setDate(fortnight.getDate()+14);\r\n\r\n          setNewDetails(\"\");\r\n          setNewTaskPriority(2);\r\n          setDueDate(fortnight);\r\n          setReqDate(new Date());\r\n          setNewRef1(\"\");\r\n          setNewContact(\"\");\r\n          setNewRef2(\"\");\r\n          setNewNotes(\"\");\r\n          setNewEstimate(\"\");\r\n          setNewInvoice(\"\");\r\n          setNewDepartment({});\r\n          setNewCustomer({});\r\n          \r\n          setUrgent(null);\r\n\r\n          setInputList([{item: \"\"}]);\r\n        }, 200)\r\n          \r\n    }\r\n    \r\n    const handleShowNewTask = () => {\r\n      setShowNewTask(true);\r\n      setNewUser(currentUserObj);\r\n      \r\n      setTimeout(()=> {\r\n        document.getElementById(`inline-newTask-radio-${newTaskPriority}`).click();\r\n      },10)\r\n    }\r\n\r\n    //Function that handles the submit button for adding a new task\r\n    const onSubmitNewTask = () => {\r\n       \r\n\r\n        //Set Dates to correct format\r\n        var newDueDate = moment(dueDate).format('YYYY-MM-DD hh:mm:ss');\r\n        var newReqDate = moment(reqDate).format('YYYY-MM-DD hh:mm:ss'); \r\n        \r\n        var DepToAdd = {};\r\n        var CustToAdd = {};\r\n        \r\n        //console.log(newCustomer);\r\n        //console.log(currentCustFilter);\r\n        if(newCustomer.CustomerCode===undefined) {\r\n          CustToAdd = currentCustFilter;\r\n        } else {\r\n          CustToAdd = newCustomer;\r\n        }\r\n        //console.log(CustToAdd);\r\n        if(newDepartment.Code===undefined){\r\n          DepToAdd = currentDepFilter;\r\n        } else {\r\n          DepToAdd = newDepartment;\r\n        }\r\n        //console.log(DepToAdd);\r\n        //console.log(newUser);\r\n        getNewTaskID().then(task=> {\r\n          setNewTaskNo(task[0][\"\"])\r\n        //Check if Customer and Department have been Selected before adding new task\r\n          if(CustToAdd.CustomerCode===0){\r\n            alert(\"Please Select a Customer\");\r\n          } else if(DepToAdd.Code===0) {\r\n            alert (\"Please Select a Department\");\r\n          } else if(newUser.UserId === 0) {\r\n            alert (\"Please Select a User\");\r\n          }else{\r\n            //console.log(task.[0].[\"\"]);\r\n            addNewTask(task[0][\"\"], CustToAdd.CustomerName, CustToAdd.CustomerCode, newDetails, newTaskPriority, newDueDate, newReqDate, DepToAdd.Code, Username, newUser.UserId, newRef1, newContact, newRef2, newNotes, newEstimate, newInvoice, urgent);\r\n            openHistory(task[0][\"\"], UserID);\r\n            onTaskCreate(task[0][\"\"]);\r\n            \r\n            //console.log(inputList[0].item);\r\n            if(inputList[0].item!==''){\r\n              //console.log('test');\r\n              inputList.forEach(e => {\r\n                addItem(task[0][\"\"], e.item);\r\n              })\r\n            }\r\n            \r\n\r\n            handleCloseNewTask();\r\n          }\r\n        \r\n          //Reload task data\r\n          setTimeout(()=> {\r\n            props.onClick();\r\n          },500)\r\n        });\r\n        //console.log(urgent);\r\n        \r\n    }\r\n//----------//\r\n\r\n//----- Send Email of New Task -----//\r\n    const onTaskCreate = (nextTaskNum) => {\r\n      var thisDueDate = moment(dueDate).format('DD/MM/YYYY');\r\n      \r\n      setEmailBody(`mailto:?subject=Task:%20${nextTaskNum}&body=Issue:%20${newTaskNo}%0D%0ADetails:%20${newDetails}%0D%0APriority:%20${newTaskPriority}%0D%0ABy:%20${newUser.Username}%0D%0ADue:%20${thisDueDate}`);\r\n      \r\n      const textToCopy = `Task: ${nextTaskNum}\\r\\nDetails: ${newDetails}\\r\\nPriority: ${newTaskPriority}\\r\\nBy: ${newUser.Username}\\r\\nDue: ${thisDueDate}`; \r\n      \r\n      copyToClipboard(textToCopy)\r\n        .catch(() => console.log('error'));\r\n      setShowAlert(true);  \r\n    }\r\n    const createEmail = () => { \r\n      //Send email here\r\n      window.open(emailBody);\r\n    }\r\n\r\n    function copyToClipboard(textToCopy) {\r\n      // navigator clipboard api needs a secure context (https)\r\n      if (navigator.clipboard && window.isSecureContext) {\r\n          // navigator clipboard api method'\r\n          return navigator.clipboard.writeText(textToCopy);\r\n      } else {\r\n          // text area method\r\n          let textArea = document.createElement(\"textarea\");\r\n          textArea.value = textToCopy;\r\n          // make the textarea out of viewport\r\n          textArea.style.position = \"fixed\";\r\n          textArea.style.left = \"-999999px\";\r\n          textArea.style.top = \"-999999px\";\r\n          document.body.appendChild(textArea);\r\n          textArea.focus();\r\n          textArea.select();\r\n          return new Promise((res, rej) => {\r\n              // here the magic happens\r\n              document.execCommand('copy') ? res() : rej();\r\n              textArea.remove();\r\n          });\r\n      }\r\n  }\r\n\r\n  const [inputList, setInputList] = useState([{item: \"\"}]);\r\n    \r\n\r\n    // handle input change\r\n    const handleInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        const list = [...inputList];\r\n        list[index][name] = value;\r\n        setInputList(list);\r\n    };\r\n\r\n    // handle click event of the Remove button\r\n    const handleRemoveClick = index => {\r\n      const list = [...inputList];\r\n      list.splice(index, 1);\r\n      setInputList(list);\r\n    };\r\n\r\n    // handle click event of the Add button\r\n    const handleAddClick = () => {\r\n      setInputList([...inputList, { item: \"\"}]);\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n        <OverlayTrigger key='NewTask' placement='bottom'\r\n          overlay={\r\n            <Tooltip id='tooltip-newtask'>\r\n              New Task\r\n            </Tooltip>\r\n          }\r\n        >\r\n        <Button variant=\"secondary\" style={{margin:'5px'}}\r\n      \tonClick={ () => {\r\n          handleShowNewTask();  \r\n          //getNewTaskID().then(task=> setNewTaskNo(task.[0].[\"\"])); \r\n          setNewContact(Username);  \r\n        }}\r\n        className=\"button-to-the-left\"\r\n        >\r\n           <RiFileAddLine/>\r\n        </Button>\r\n        </OverlayTrigger>\r\n\r\n        <Modal show={showNewTask} onHide={handleCloseNewTask} size='lg'>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create New Task</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          \r\n          \r\n          <Form>\r\n          <Row>\r\n            <Col>\r\n              <Form.Group controlId=\"newTask.CustomerSelect\">\r\n              <h7>Customer:</h7>\r\n                <Form.Control size=\"sm\" as=\"select\" value={customers.CustomerName}\r\n                    onChange = {e=> setNewCustomer(JSON.parse(e.target.value))}>\r\n                  <option value ={JSON.stringify(currentCustFilter)}>{currentCustFilter.CustomerName}</option>\r\n                  \r\n                  <option value={JSON.stringify(HQDetails)}>{HQDetails.CustomerName}</option>\r\n                  {\r\n                    customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                  }\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group controlId=\"newTask.DepartmentSelect\">\r\n              <h7>Department:</h7>\r\n                <Form.Control size=\"sm\" as=\"select\" value={departments.Department}\r\n                    onChange = {e=> setNewDepartment(JSON.parse(e.target.value))}>\r\n                  <option value ={JSON.stringify(currentDepFilter)}>{currentDepFilter.Department}</option>\r\n                  {\r\n                    departments.map((department, index) => {\r\n                      if(department.Department!==currentDepFilter.Department){\r\n                        return(<option key={index} value={JSON.stringify(department)}>{department.Department}</option>)\r\n                      } else {\r\n                        return null;\r\n                      } \r\n                    })\r\n                  }\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group controlId=\"newTask.UserSelect\">\r\n                <h7>For:</h7>\r\n                <Form.Control size=\"sm\" as=\"select\" value={users.Username}\r\n                    onChange = {e=> setNewUser(JSON.parse(e.target.value))}>\r\n                  <option value ={JSON.stringify(currentUserObj)}>{currentUserObj.Username}</option>\r\n                  {\r\n                    users.map((user, index) => {\r\n                    if(user.Username!==currentUserObj.Username) {\r\n                      return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\r\n                    } else return null;\r\n                    })\r\n                  }\r\n                </Form.Control>\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Details\">\r\n                <h7>Details:</h7>\r\n                <Form.Control \r\n                  as=\"textarea\" \r\n                  rows={3} \r\n                  placeholder=\"Add Details...\"\r\n                  value={newDetails}\r\n                  onChange = {e=> setNewDetails(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"sm\"\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n            <Col>\r\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Notes\">\r\n                <h7>Notes:</h7>\r\n                <Form.Control \r\n                  as=\"textarea\" \r\n                  rows={3} \r\n                  placeholder=\"Add Notes...\"\r\n                  value={newNotes}\r\n                  onChange = {e=> setNewNotes(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"sm\"\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          \r\n\r\n          <Form.Group as={Row} className=\"mb-3\" controlId=\"newTask.Dates\" style={{marginTop: 5}}>\r\n                  <Col xs={2}>\r\n                    <Form.Label>Due:</Form.Label>\r\n                  </Col>\r\n                  <Col >\r\n                    <DatePicker \r\n                      selected={dueDate} \r\n                      onChange={(date) => setDueDate(date)} \r\n                      dateFormat = 'dd/MM/yyyy' \r\n                      calendarStartDay={1} \r\n                      \r\n                    />\r\n                  </Col>\r\n                  <Col xs={2}>\r\n                    <Form.Label>Requested:</Form.Label>\r\n                  </Col>\r\n                  <Col>\r\n                    <DatePicker \r\n                      selected={reqDate} \r\n                      onChange={(date) => setReqDate(date)} \r\n                      dateFormat = 'dd/MM/yyyy'  \r\n                      calendarStartDay={1}\r\n                    />\r\n                  </Col>\r\n                  \r\n          </Form.Group>    \r\n            \r\n              <Form.Group as={Row} className=\"mb-3\" controlId=\"newTask.Reference1-2\" style={{marginTop: 5}}>\r\n              <Col xs={1}>\r\n                    <Form.Label>P:</Form.Label>\r\n                  </Col>\r\n                  <Col xs={3}>\r\n                    <Form.Check\r\n                      size=\"sm\"\r\n                      inline\r\n                      label=\"1\"\r\n                      type=\"radio\"\r\n                      name=\"group1\"\r\n                      id={'inline-newTask-radio-1'}\r\n                      onChange = {e=> setNewTaskPriority(1)}\r\n                    />\r\n                    <Form.Check\r\n                      size=\"sm\"\r\n                      inline\r\n                      label=\"2\"\r\n                      type=\"radio\"\r\n                      name=\"group1\"\r\n                      id={'inline-newTask-radio-2'}\r\n                      onChange = {e=> setNewTaskPriority(2)}\r\n                    />\r\n                    <Form.Check\r\n                      size=\"sm\"\r\n                      inline\r\n                      label=\"3\"\r\n                      type=\"radio\"\r\n                      name=\"group1\"\r\n                      id={'inline-newTask-radio-3'}\r\n                      onChange = {e=> setNewTaskPriority(3)}\r\n                    />\r\n                  </Col>\r\n                <Col xs={2}>\r\n                  <h7>Reference 1:</h7>\r\n                </Col>\r\n                <Col>  \r\n                  <Form.Control \r\n                    style={{display:'inline'}}\r\n                    size=\"sm\"\r\n                    as=\"textarea\" \r\n                    rows={1}\r\n                    type=\"text\"\r\n                    value={newRef1}\r\n                    onChange = {e=> setNewRef1(e.target.value)}\r\n                  />\r\n                </Col>\r\n                <Col xs={2}>\r\n              <Form.Label>Reference 2:</Form.Label>\r\n            </Col>\r\n            <Col>\r\n                  <Form.Control \r\n                    as=\"textarea\" \r\n                    rows={1}\r\n                    type=\"text\"\r\n                    value={newRef2}\r\n                    onChange = {e=> setNewRef2(e.target.value)}\r\n                    size=\"sm\"\r\n                  />\r\n            </Col>\r\n              </Form.Group>          \r\n            \r\n            <Form.Group as={Row} className=\"mb-3\" controlId=\"newTask.Contact\" style={{marginTop: 5}}>\r\n                <Col xs={2}>\r\n                  <Form.Label>Requester:</Form.Label>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Control \r\n                    as=\"textarea\" \r\n                    rows={1}\r\n                    type=\"text\"\r\n                    value={newContact}\r\n                    onChange = {e=> setNewContact(e.target.value)}\r\n                    size=\"sm\"\r\n                  />\r\n                </Col>\r\n                <Col xs={1}>\r\n                  <Form.Label>Estimate:</Form.Label>\r\n                </Col>\r\n                <Col xs={2}>\r\n                  <Form.Control \r\n                    as=\"textarea\" \r\n                    rows={1}\r\n                    type=\"text\"\r\n                    value={newEstimate}\r\n                    onChange = {e=> setNewEstimate(e.target.value)}\r\n                    size=\"sm\"\r\n                  />\r\n                </Col>\r\n                <Col xs={1}>\r\n                  <Form.Label>Invoice:</Form.Label>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Control \r\n                    as=\"textarea\" \r\n                    rows={1}\r\n                    type=\"text\"\r\n                    value={newInvoice}\r\n                    onChange = {e=> setNewInvoice(e.target.value)}\r\n                    size=\"sm\"\r\n                  />\r\n                </Col>        \r\n            </Form.Group> \r\n        </Form>\r\n\r\n         <div>\r\n            <Form.Label>Items:</Form.Label>\r\n        {inputList.map((x, i) => {\r\n        return (\r\n          <div className=\"box\">\r\n            <Form.Group as={Row} controlId=\"newItems\" style={{marginTop: 5}}>\r\n                <Col>\r\n                <Form.Control\r\n                    size=\"sm\"\r\n                    as=\"textarea\" \r\n                    rows={1}\r\n                    type=\"text\"\r\n                    name=\"item\"\r\n                    value={x.item}\r\n                    onChange={e => handleInputChange(e, i)}\r\n                />\r\n                </Col>\r\n                <Col xs={1}>\r\n                    {inputList.length !== 1 && \r\n                      <OverlayTrigger key='RemoveItem' placement='bottom'\r\n                      overlay={\r\n                        <Tooltip id='tooltip-removeitem'>\r\n                          Remove Item\r\n                        </Tooltip>\r\n                      }\r\n                      > \r\n                        <Button size=\"sm\" className=\"mr10\" variant=\"secondary\" onClick={() => handleRemoveClick(i)}><BiMinus/></Button>\r\n                      </OverlayTrigger>\r\n                    }\r\n                </Col>\r\n                \r\n                <Col xs={1}>    \r\n                    {inputList.length - 1 === i && \r\n                      <OverlayTrigger key='AddItem' placement='bottom'\r\n                      overlay={\r\n                        <Tooltip id='tooltip-additem'>\r\n                          Add Item\r\n                        </Tooltip>\r\n                      }\r\n                      > \r\n                      <Button size=\"sm\" variant=\"secondary\" onClick={handleAddClick}><BiPlus/></Button>\r\n                      </OverlayTrigger>\r\n                    }\r\n                </Col>\r\n            </Form.Group>\r\n          </div>\r\n        );\r\n      })}\r\n      \r\n    </div>\r\n    \r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n\r\n          <Form.Check \r\n              type=\"checkbox\" \r\n              label=\"Make Urgent\"\r\n              style={{margin:5, right:450 }}\r\n              onChange = {e=> {\r\n                if(urgent===null){\r\n                  setUrgent(1);\r\n                } else {\r\n                  setUrgent(null);\r\n                }\r\n              }}  \r\n          />\r\n          \r\n          <Button variant=\"secondary\" onClick={handleCloseNewTask}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={()=>{ \r\n            onSubmitNewTask();\r\n          }}>\r\n            Create Task\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n\r\n      <Modal\r\n        size=\"sm\"\r\n        show={showAlert}\r\n        onHide={() => setShowAlert(false)}\r\n        aria-labelledby=\"success-alert\"\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title id=\"success-alert-title\">\r\n            Task {newTaskNo} Created\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Details copied to clipboard\r\n          <br/>\r\n          <Button variant='success' onClick={()=> createEmail()} className=\"button-to-the-right\">\r\n          <HiOutlineMail/>\r\n          </Button>\r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n    </>\r\n    )\r\n});\r\n\r\n\r\nexport default NewTask;  ","import React, {useState} from 'react';\r\nimport moment from 'moment'\r\n\r\n\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport DatePicker from 'react-datepicker'\r\n\r\nimport { editMultiple, makeUrgent } from './returnTasks.js'\r\nimport {FiEdit} from \"react-icons/fi\"\r\n\r\n\r\n\r\nconst MultiEdit = React.memo(props => {\r\n  //Make Multiple Urgent\r\n  const [urgent, setUrgent] = useState(0);\r\n\r\n  //console.log(\"MultiEdit Render\");\r\n  //console.log(props);\r\n\r\n  //----- EDIT MULTIPLE TASKS -----//\r\n  //Handle Show/Hide modal\r\n  const [showMultiEdit, setShowMultiEdit] = useState(false);\r\n  const handleShowMultiEdit = () => {\r\n    setShowMultiEdit(true);\r\n    //console.log(selected);\r\n  }\r\n\r\n  const handleCloseMultiEdit = () => {\r\n    setShowMultiEdit(false);\r\n  }  \r\n  //Hold temporary values for update\r\n  const [tempPriority, setTempPriority] = useState();\r\n  const [tempDueDate, setTempDueDate] = useState();\r\n\r\n  //Function when submitting updates\r\n  const onSubmitMultiEdit = () => {\r\n    setShowMultiEdit(false);\r\n    \r\n    //Create array with TaskIDs or the selected tasks\r\n    const selectedIds =[];\r\n    \r\n      Object.keys(props.selected).forEach(function(key) {\r\n        selectedIds.push(key);\r\n        if(urgent===1){\r\n          /*\r\n          //console.log(props.selected[key]);\r\n          if(props.selected[key].Urgent===true){\r\n            //console.log(key + \" is Urgent\");\r\n            makeUrgent(key, null);\r\n          } else {\r\n            //console.log(key + \" is NOT Urgent\");\r\n            makeUrgent(key, 1);\r\n          }\r\n          \r\n          //makeUrgent(key, urgent);\r\n          */\r\n          makeUrgent(key, urgent);\r\n        } else {\r\n          makeUrgent(key, null);\r\n        }\r\n        //console.log(key);\r\n      });\r\n    \r\n    \r\n\r\n    //Correctly formatting the data\r\n    let duedate = \"\";\r\n    if(tempDueDate){\r\n      duedate= moment(tempDueDate).format('YYYY-MM-DDThh:mm:ss.000');\r\n    }\r\n    \r\n    //Function to update\r\n    //console.log(tempPriority);\r\n    //console.log(duedate);\r\n    if(tempPriority!==undefined || duedate!==\"\"){\r\n      editMultiple(selectedIds, tempPriority, duedate);\r\n      //console.log('Update happened');\r\n      \r\n    }\r\n    \r\n\r\n    //Reset temporary values and re-load grid data\r\n    setTempPriority();\r\n    setTempDueDate();\r\n    setUrgent(0);\r\n\r\n    setTimeout(()=> {\r\n      props.onClick();  \r\n    },500)\r\n    \r\n  }\r\n\r\n\r\n    //Allows button to be pressed when some tasks are selected\r\n    let editIsDisabled = true;\r\n    if(JSON.stringify(props.selected).length<3) {\r\n      //console.log(selected);\r\n      editIsDisabled = true;\r\n    } else {\r\n      editIsDisabled = false;\r\n    }\r\n    //----------//\r\n\r\n  \r\n\r\n\r\n    return(\r\n        <>\r\n        \r\n        <OverlayTrigger key='MultiEdit' placement='bottom'\r\n          overlay={\r\n            <Tooltip id='tooltip-multiedit'>\r\n              Edit Multiple\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant=\"secondary\" style={{margin:'5px'}}\r\n      \tonClick={ () => {\r\n          handleShowMultiEdit();\r\n          //props.onClick();\r\n        }}\r\n        className=\"button-to-the-left\"\r\n        disabled={editIsDisabled}\r\n        >\r\n        <FiEdit/>\r\n        </Button>\r\n        </OverlayTrigger>\r\n        \r\n        \r\n        \r\n    <Modal show={showMultiEdit} onHide={handleCloseMultiEdit}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Update Selected Tasks</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form.Label>Priority:</Form.Label>\r\n            <br/>\r\n            <Form.Check\r\n              inline\r\n              label=\"1\"\r\n              type=\"radio\"\r\n              name=\"group1\"\r\n              id={'inline-radio-1'}\r\n              onChange = {e=> setTempPriority(1)} \r\n            />\r\n            <Form.Check\r\n              inline\r\n              label=\"2\"\r\n              type=\"radio\"\r\n              name=\"group1\"\r\n              id={'inline-radio-2'}\r\n              onChange = {e=> setTempPriority(2)}             \r\n            />\r\n            <Form.Check\r\n              inline\r\n              label=\"3\"\r\n              type=\"radio\"\r\n              name=\"group1\"\r\n              id={'inline-radio-3'}\r\n              onChange = {e=> setTempPriority(3)} \r\n            />\r\n            <br/>\r\n            <Form.Label>Due Date:&nbsp;&nbsp;&nbsp;</Form.Label>\r\n            <DatePicker\r\n              selected={tempDueDate}\r\n              onChange={(date) => {\r\n                setTempDueDate(date);\r\n              }}\r\n              dateFormat = 'dd/MM/yyyy'\r\n              calendarStartDay={1}\r\n            />\r\n\r\n            <Form.Check \r\n              type=\"checkbox\" \r\n              label=\"Mark Urgent\"\r\n              style={{margin:5 }}\r\n              onChange = {e=> {\r\n                  setUrgent(1);\r\n              }}  \r\n            />\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleCloseMultiEdit}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={onSubmitMultiEdit}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      </>\r\n    )\r\n});\r\n\r\nexport default MultiEdit; ","import React, { useEffect, useState, PureComponent } from 'react'\r\n\r\n//ReCharts\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Label, ResponsiveContainer } from 'recharts';\r\n\r\nimport { TailSpin } from  'react-loader-spinner'\r\n\r\n\r\n\r\nclass CustomizedAxisTick extends PureComponent {\r\n    render() {\r\n      const { x, y, stroke, payload } = this.props;\r\n  \r\n      return (\r\n        <g transform={`translate(${x},${y})`}>\r\n          <text x={0} y={0} dy={5} textAnchor=\"start\" fill=\"#666\" transform=\"rotate(90)\">\r\n            {payload.value}\r\n          </text>\r\n        </g>\r\n      );\r\n    }\r\n  }\r\n\r\n  function getEstimate(startDate, endDate, filterUser) {\r\n    return fetch('/getEstimateSummary/')\r\n      .then(data => data.json())\r\n  }\r\n\r\nfunction HoursEstimate() {\r\n\r\n    const [userData, setUserData] = useState({});\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getEstimate().then(e=> {\r\n            setUserData(e);\r\n            setLoading(false)\r\n        })\r\n    }, [])\r\n\r\n    let estimateGrid;\r\n    if(loading===true){\r\n        estimateGrid = <TailSpin color=\"#282c34\" height={200} width={200} ariLabel='Loading'/>;\r\n    } else {\r\n        estimateGrid=  <BarChart width={400} height={250} data={userData}>\r\n                            <CartesianGrid  />\r\n                            <XAxis dataKey=\"Username\" height={60} interval={0} tick={<CustomizedAxisTick/>} />\r\n                            <YAxis  label={{ value: 'Hours', angle: -90, position: 'outsideLeft' }}/>\r\n                            <Tooltip />\r\n                            <Bar dataKey=\"Estimate\" fill=\"#202c40\" maxBarSize={50} />\r\n                        </BarChart> \r\n    }\r\n    return(\r\n        <>\r\n        {estimateGrid}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HoursEstimate;","\r\nimport React, {useState, useEffect} from 'react';\r\nimport Button from 'react-bootstrap/Button'\r\nimport Toast from 'react-bootstrap/Toast'\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\r\nimport '../custom-grid-styling.css';\r\n\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\nimport { getSummary, getTaskCount } from './returnTasks'\r\nimport {BsTable} from \"react-icons/bs\"\r\n\r\nimport { default as HoursEstimate } from './HoursEstimate.jsx'\r\n\r\nimport './custom-styling.css';\r\n\r\n\r\nconst Summary = React.memo( props => {\r\n    \r\n    //console.log(\"Summary Render\");\r\n    \r\n    const [show, setShow] = useState(false);\r\n    //const [dataSource, setDataSource] = useState([]);\r\n    const [r1, setR1] = useState();\r\n    const [r2, setR2] = useState();\r\n    const [r3, setR3] = useState();\r\n    const [w1, setW1] = useState();\r\n    const [w2, setW2] = useState();\r\n    const [w3, setW3] = useState();\r\n    const [s1, setS1] = useState();\r\n    const [s2, setS2] = useState();\r\n    const [s3, setS3] = useState();\r\n    const [g1, setG1] = useState();\r\n    const [g2, setG2] = useState();\r\n    const [g3, setG3] = useState();\r\n    const [n1, setN1] = useState();\r\n    const [n2, setN2] = useState();\r\n    const [n3, setN3] = useState();\r\n\r\n    const [fullCount, setFullCount] = useState();\r\n\r\n\r\n    const handleShow = () => {\r\n        if(show===false){\r\n            setShow(true);\r\n        } else {\r\n            setShow(false);\r\n        }\r\n        \r\n    }\r\n\r\n    //GRID SET UP\r\n    //Default Sorting Info for the grid\r\n   const defaultSortInfo = { name: 'All', dir: -1 }\r\n\r\n    const theme = 'default-dark'\r\n    const columns = [\r\n        {name: 'User', header: 'User', maxWidth:100, type: 'string'},\r\n        {name: 'p1', header: '1', maxWidth:60, type: 'number'},\r\n        {name: 'p2', header: '2', maxWidth:60, type: 'number'},\r\n        {name: 'p3', header: '3', maxWidth:60, type: 'number'},\r\n        {name: 'All', header: 'All', maxWidth:72, type: 'number'}\r\n    ]\r\n    const gridStyle = { minHeight:250, margin:5 }\r\n    \r\n    const userSource = [\r\n        {id: 1, User: 'Richard', p1: 0, p2: 0, p3: 0},\r\n        {id: 2, User: 'Wesley', p1: 0, p2: 0, p3: 0},\r\n        {id: 5, User: 'Stephen', p1: 0, p2: 0, p3: 0},\r\n        {id: 6, User: 'Gavin', p1: 0, p2: 0, p3: 0},\r\n        {id: 7, User: 'Neil', p1: 0, p2: 0, p3: 0}\r\n    ]\r\n    \r\n    // eslint-disable-next-line\r\n    const getDataSource = () => {\r\n        const priorities = [1,2,3];\r\n        \r\n\r\n        userSource.forEach(user => {   \r\n            priorities.forEach(p => {\r\n               getSummary(user.id, p)\r\n                .then(result => {\r\n                    //console.log(result);\r\n                    if(user.id===1 && p===1){\r\n                        setR1(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===1 && p===2){\r\n                        setR2(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===1 && p===3){\r\n                        setR3(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===2 && p===1){\r\n                        setW1(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===2 && p===2){\r\n                        setW2(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===2 && p===3){\r\n                        setW3(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===5 && p===1){\r\n                        setS1(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===5 && p===2){\r\n                        setS2(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===5 && p===3){\r\n                        setS3(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===6 && p===1){\r\n                        setG1(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===6 && p===2){\r\n                        setG2(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===6 && p===3){\r\n                        setG3(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===7 && p===1){\r\n                        setN1(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===7 && p===2){\r\n                        setN2(result[0][\"\"]);\r\n                    }\r\n                    if(user.id===7 && p===3){\r\n                        setN3(result[0][\"\"]);\r\n                    }\r\n                }) \r\n            })\r\n        });        \r\n    }\r\n    \r\n    \r\n    const count = ()=> {\r\n        getTaskCount().then(c=>{\r\n            setFullCount(c[0][\"\"]);            \r\n        })\r\n    }\r\n\r\n    let x=0;\r\n    useEffect(() => {\r\n        if(x===0){\r\n            getDataSource();  \r\n            count();\r\n            x=x+1; \r\n        }\r\n\r\n        //console.log(x);\r\n    })\r\n    \r\n\r\n    const dataSource = [\r\n        {id: 1, User: 'Richard', p1: r1, p2: r2, p3: r3, All: [r1+r2+r3]},\r\n        {id: 2, User: 'Wesley', p1: w1, p2: w2, p3: w3, All: [w1+w2+w3]},\r\n        {id: 5, User: 'Stephen', p1: s1, p2: s2, p3: s3, All: [s1+s2+s3]},\r\n        {id: 6, User: 'Gavin', p1: g1, p2: g2, p3: g3, All: [g1+g2+g3]},\r\n        {id: 7, User: 'Neil', p1: n1, p2: n2, p3: n3, All: [n1+n2+n3]}\r\n    ]\r\n\r\n    //var numbers = [r1+r2+r3, w1+w2+w3, s1+s2+s3, g1+g2+g3, n1+n2+n3];\r\n    //console.log(numbers);\r\n    //numbers.sort(function(a, b) {\r\n    //  return b - a;\r\n    //});\r\n    //console.log(numbers);\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n        \r\n        <OverlayTrigger key='Summary' placement='bottom'\r\n          overlay={\r\n            <Tooltip id='tooltip-summary'>\r\n              Show Summary Table\r\n            </Tooltip>\r\n          }\r\n        >\r\n            <Button  onClick={ () => {\r\n            handleShow();\r\n            getDataSource();  \r\n            count();   \r\n        }}\r\n        style={{margin:'5px'}}\r\n          variant={'secondary'}\r\n          >\r\n            <BsTable/>\r\n          </Button>\r\n        </OverlayTrigger>\r\n        \r\n\r\n\r\n        <div className=\"summary\">\r\n        <Toast onClose={() => setShow(false)} show={show} style={{width:'800px', height: '320px'}} >\r\n          <Toast.Header>\r\n            <strong className=\"me-auto\">Summary&nbsp;-&nbsp;&nbsp;{fullCount}</strong>\r\n            \r\n          </Toast.Header>\r\n          <Toast.Body>\r\n          <div className=\"summary-grid\">\r\n              <ReactDataGrid \r\n                idProperty=\"id\"\r\n                columns={columns}\r\n                dataSource={dataSource}\r\n                style={gridStyle}\r\n                theme={theme}\r\n                defaultSortInfo={defaultSortInfo}\r\n              />\r\n            </div>\r\n            <div className=\"estimate-chart\">\r\n                <HoursEstimate />\r\n            </div>\r\n\r\n              \r\n          </Toast.Body>\r\n        </Toast> \r\n        </div>\r\n        \r\n      </>\r\n    )\r\n});\r\n\r\nexport default Summary;","export function LoadDataSource (user, priority, showingClosed, filterCustCode, department, urgent, search) {\r\n\r\n    //-----LOAD TASKS FOR THE GRID -----//\r\n    //const [dataSource, setDataSource] = useState([]);\r\n    //const [taskAmount, setTaskAmount] = useState(0);\r\n\r\n    let dataSource = []\r\n    let taskAmount = 0;\r\n\r\n    const filterUser = user;\r\n    const filterPriority = priority;\r\n    const isShowClosed = showingClosed;\r\n    const filterCustomer = filterCustCode;\r\n    const departmentCode = department;\r\n    const urgentOnly = urgent;\r\n    let Search = search;\r\n    if(search === '') {\r\n      Search = 'nosearchentered';\r\n    }\r\n    \r\n      const newDataSource = (filterUser, filterPriority, isShowClosed, filterCustomer, departmentCode, urgentOnly, Search) =>{\r\n        return fetch('/queryTasks/' + filterUser + '&' + filterPriority + '&' + isShowClosed + '&' + filterCustomer + '&' + departmentCode + '&' + urgentOnly + '&' + Search).then(response => {\r\n\r\n          return response.json().then(data => {\r\n            taskAmount = data.length;\r\n            return { data, count: data.length };\r\n          })\r\n        });\r\n      }\r\n      dataSource = newDataSource(filterUser, filterPriority, isShowClosed, filterCustomer, departmentCode, urgentOnly, Search);\r\n    \r\n    //----------//\r\n\r\n    let returnValues = {\r\n      data: dataSource,\r\n      count: taskAmount\r\n    }\r\n\r\n    return returnValues;\r\n}","import React, {  useState, useEffect, useCallback } from 'react';\r\n//ReactDataGrid.io used for main grid\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\nimport '@inovua/reactdatagrid-community/base.css'\r\nimport '@inovua/reactdatagrid-community/index.css'\r\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\r\n\r\n//Bootstrap Used for buttons, modals and styling\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport Tabs from 'react-bootstrap/Tabs'\r\nimport Tab from 'react-bootstrap/Tab'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\n//React-DatePicker used for date inputs\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport moment from 'moment'\r\n\r\n// Importing functions to fetch data from express.js server\r\nimport { addNewTask, openHistory, getNewTaskID, getHistory, addNote, updateTask, returnCustomers, returnDepartments, returnUsers, getSelectedTask, returnReasons, closeTask, reOpenTask, makeUrgent, getItems, closeItem, getTimeSpent } from './returnTasks.js'\r\n// Function to export grid to excel\r\nimport { exportCSV, exportPDF, exportHistoryPDF } from '../excelExport.js'\r\n\r\nimport NewTask from './NewTask.jsx'\r\nimport MultiEdit from './MultiEdit.jsx'\r\nimport Summary from './Summary.jsx'\r\nimport {LoadDataSource} from './LoadDataSource'\r\n\r\n\r\nimport {RiFileExcel2Line} from 'react-icons/ri'\r\nimport {ImFilePdf} from 'react-icons/im'\r\nimport {IoReload} from 'react-icons/io5'\r\nimport {MdCancel} from 'react-icons/md'\r\nimport { FaExclamation, FaSave} from 'react-icons/fa'\r\nimport {HiOutlineMail} from \"react-icons/hi\";\r\nimport {AiFillCloseCircle, AiOutlineCopy} from \"react-icons/ai\";\r\nimport {BiPlus, BiMinus } from \"react-icons/bi\"\r\n\r\n\r\n\r\n\r\nfunction addItem(task, details) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      Details: details,\r\n      taskID: task\r\n    })\r\n  }\r\n  return fetch('/addItem/', requestOptions)\r\n   \r\n}\r\n\r\n//CSS File for changing row colours\r\n \r\n\r\n//This function adds a className to a row that allows custom styling of that row\r\nconst rowClassName = ({data})=> {\r\n  \r\n  \r\n  if (data.State === 'C') {\r\n    return \"global-custom-row-green\"\r\n  } else if(data.Urgent===true){\r\n    return \"global-custom-row-red\"\r\n  }\r\n  return 'global-custom-row'\r\n  \r\n}\r\n\r\nconst itemRowClassName = ({data})=> {\r\n\r\n  if(data.Complete===true) {\r\n    return \"global-custom-row-light-green\"\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n//Overall Tasks function that handles the 'Tasks' page\r\nfunction Tasks() {\r\n  //console.log(\"Tasks Render\");\r\n  document.title = 'HQ Business - Tasks';\r\n\r\n  //----- GET CURRENT USER -----//\r\n  const tokenString = sessionStorage.getItem('token');\r\n  const userToken = JSON.parse(tokenString);\r\n  //const Username = userToken.username;\r\n  const UserID = userToken.userId;\r\n\r\n  const AllCustomers = {\r\n    \"SupportCode\":0,\r\n    \"Customer_Code\":0,\r\n    \"CustomerName\":\"All Customers\",\r\n    \"CustomerCode\":0\r\n  }\r\n  const AllDepartments = {\r\n    'Code': 0,\r\n    'Department': 'All Departments'\r\n  }\r\n  const AllUsers = {\r\n    'Username': 'None Selected',\r\n    'UserId': 0\r\n  }\r\n  const currentUserObj = {\r\n    'UserId': userToken.userId,\r\n    'Username':  userToken.username\r\n  }\r\n  \r\n  const [dataSource, setDataSource] = useState([]);\r\n  const [itemDataSource, setItemDataSource] = useState([]);\r\n  const [taskAmount, setTaskAmount] = useState();\r\n  \r\n  const [filterUser, setFilterUser] = useState(currentUserObj);\r\n  const [filterPriority, setFilterPriority] = useState(1);\r\n  const [filterCustomer, setFilterCustomer] = useState(AllCustomers);\r\n  const [filterDepartment, setFilterDepartment] = useState(AllDepartments);\r\n  const [showingClosed, setShowingClosed] = useState(false);\r\n  const [urgentOnly, setUrgentOnly] = useState(false);\r\n  const [searchString, setSearchString] = useState('');\r\n\r\n\r\n  //const [allCurrTasks, setAllCurrTasks] = useState({});\r\n\r\n  const reLoadDataExt = () => {\r\n    setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code, urgentOnly, searchString).data);\r\n    setSelected({});\r\n  }\r\n  \r\n  // Use Effect Hook to load data for the grid when webpage is loaded\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    \r\n    setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code, urgentOnly, searchString).data);\r\n    //console.log(dataSource);\r\n    returnCustomers()\r\n      .then(customers => {\r\n        if(mounted) {\r\n          setCustomers(customers)\r\n        }\r\n      })\r\n    returnDepartments()\r\n      .then(departments => {\r\n        if(mounted) {\r\n          setDepartments(departments);\r\n        }\r\n      })\r\n    returnUsers()\r\n      .then(users => { \r\n        if(mounted) {\r\n          setUsers(users)\r\n        }\r\n      }) \r\n      if(filterPriority===1) {\r\n        document.getElementById(\"inline-radio-1\").click();\r\n      }\r\n      if(filterPriority===2) {\r\n        document.getElementById(\"inline-radio-2\").click();\r\n      }\r\n      if(filterPriority===3) {\r\n        document.getElementById(\"inline-radio-3\").click();\r\n      }\r\n\r\n\r\n      //let gridData=gridRef.current.data;\r\n      //console.log(gridData);\r\n      //let allTasks={};\r\n      //for(let i=0; i<gridData.length; i++) {\r\n      //  allTasks[gridData[i].Task] = gridData[i]\r\n      //}\r\n      //console.log(allTasks);\r\n      //setAllCurrTasks(allTasks);\r\n      //console.log(allCurrTasks);\r\n\r\n      //console.log(dataSource);\r\n    return () => mounted = false;\r\n  }, [filterUser, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code, urgentOnly, searchString])\r\n  //Store reference to grid for exporting PDF/CSV\r\n  const [gridRef, setGridRef] = useState(null);\r\n  const [historyRef, setHistoryRef] = useState(null);\r\n\r\n  const [noteValue, setNoteValue] = useState(\"\");\r\n  const [historyMinutes, setHistoryMinutes] = useState();\r\n\r\n  \r\n  \r\n\r\n\r\n\r\n  //----- DOUBLE-CLICK ON ROW -----//\r\n  \r\n  //setting departments/users/customers for drop downs\r\n  const [departments, setDepartments] = useState([]);\r\n  const [customers, setCustomers] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  //Store current taskID of row that has been double clicked\r\n  var [taskID, setTaskID] = useState();\r\n  //Store History of current task\r\n  const [history, setHistory] = useState([]);\r\n  //Dates to update\r\n  const [updateDueDate, setUpdateDueDate] = useState(new Date());\r\n  const [updateReqDate, setUpdateReqDate] = useState(new Date());\r\n  //State to load in the task that will be updated\r\n  const [taskToUpdate, setTaskToUpdate] = useState({});\r\n  //Holds values of dropdowns to update task with\r\n  const [editCustomer, setEditCustomer] = useState([]);\r\n  const [editDepartment, setEditDepartment] = useState([]);\r\n  const [editUser, setEditUser] = useState([]);\r\n  const [departmentValue, setDepartmentValue] = useState({});\r\n  const [tasksUser, setTasksUser] = useState({});\r\n\r\n\r\n  const [closedStatus, setClosedStatus] = useState('O');\r\n\r\n\r\n  //-- SHOW/HIDE MODAL --//\r\n  const [show, setShow] = useState(false);\r\n  const [showCloseTask, setShowCloseTask] = useState(false);\r\n\r\n  const [emailBody, setEmailBody] = useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setSelected({}); \r\n    setHistoryMinutes(); \r\n    setSelectedItems();\r\n  }\r\n  const handleShow = () => {setShow(true);}\r\n\r\n  //-- ALLOW DOUBLE CLICK --//\r\n  const onRowDoubleClick = useCallback((rowProps) => {   \r\n    \r\n    var taskID = rowProps.data.Task;\r\n\r\n    setItemDataSource(getItems(rowProps.data.Task));\r\n\r\n    getSelectedTask(taskID).then(task=> {\r\n      setTaskToUpdate(task[0]);\r\n\r\n      //console.log(task[0]);\r\n      setUpdateDueDate(new Date(task[0].DueDate));\r\n      setUpdateReqDate(new Date(task[0].Requested));\r\n      for(let i=0; i<departments.length; i++) {\r\n        if(departments[i].Code===task[0].Department) {\r\n          setDepartmentValue(departments[i]);\r\n        }\r\n      }\r\n      for(let j=0; j<users.length; j++) {\r\n        if(task[0].ActionBy===users[j].UserId){\r\n          setTasksUser(users[j]);\r\n          \r\n        }\r\n      }\r\n      \r\n      setClosedStatus(task[0].State);\r\n\r\n      \r\n      \r\n      let duedate= new Date(task[0].DueDate)\r\n      let taskDate = moment(duedate).format(\"DD-MM-YYYY\")\r\n      \r\n      setEmailBody(`mailto:?subject=Task:%20${task[0].Issue_No}&body=Company:%20${task[0].Company_Name}%0D%0AIssue:%20${task[0].Issue_No}%0D%0ADetails:%20${task[0].Details}%0D%0APriority:%20${task[0].Priority}%0D%0ADue:%20${taskDate}`);\r\n    });\r\n\r\n   \r\n\r\n    //console.log(departmentValue);\r\n    \r\n    handleShow();    \r\n       \r\n    setTimeout(() => {\r\n        document.getElementById('addHistory').focus();\r\n        /*\r\n        if(urgentStatus==true) {\r\n          document.getElementById('mark-urgent-check').click();\r\n        }\r\n        */\r\n    },20)\r\n        \r\n    setTaskID(taskID)\r\n    //var items = getHistory(taskID)\r\n    //setHistory(items)\r\n    \r\n    getHistory(taskID)\r\n      .then(history => {  \r\n        setHistory(history);        \r\n      })  \r\n      \r\n  }, [departments, users]);\r\n\r\n  const onRenderRow = useCallback((rowProps) => {\r\n    const { onDoubleClick } = rowProps;\r\n    \r\n    setTaskAmount(rowProps.dataSourceArray.length);\r\n    \r\n    \r\n    rowProps.onDoubleClick = (event) => {\r\n      onRowDoubleClick(rowProps);\r\n      if (onDoubleClick) {\r\n        onDoubleClick(event);\r\n      }\r\n    };\r\n\r\n\r\n    \r\n  }, [onRowDoubleClick])\r\n  \r\n  //-- SUBMIT BUTTONS --//\r\n  const onSubmit = () => {\r\n    \r\n    \r\n    handleClose();\r\n    //console.log(editUser);\r\n    //console.log(tasksUser);\r\n    \r\n\r\n    if(editUser.UserId === undefined) {\r\n      updateTask(taskToUpdate, editCustomer.CustomerName, editCustomer.CustomerCode, editDepartment.Code, tasksUser.UserId);\r\n      //console.log(tasksUser);\r\n    } else {\r\n      updateTask(taskToUpdate, editCustomer.CustomerName, editCustomer.CustomerCode, editDepartment.Code, editUser.UserId);\r\n      // console.log(editUser);\r\n\r\n      //Add Note to History tracking change of User for the Task\r\n      //  editUser.Username == User task was changed to.\r\n      //  tasksUser.Username == User it was previously\r\n\r\n      let userChanged = \"From \" + tasksUser.Username + \" to \" + editUser.Username; \r\n      \r\n      addNote(userChanged, taskID, UserID);\r\n\r\n    }\r\n   \r\n    \r\n    if(noteValue !== \"\") {\r\n      addNote(noteValue, taskID, UserID, historyMinutes);\r\n      setNoteValue(\"\");\r\n    }\r\n    setEditCustomer([]);\r\n    setEditUser([]);\r\n    \r\n    setTimeout(()=> {\r\n      setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code, urgentOnly, searchString).data);\r\n    },500)\r\n  \r\n  \r\n\r\n\r\n    if(selectedItems!==undefined) {\r\n      const selectedIds =[];\r\n\r\n      Object.keys(selectedItems).forEach(function(key) {\r\n        selectedIds.push(key);\r\n        //console.log(selectedItems[key].Complete);\r\n        if(selectedItems[key].Complete===false){\r\n          closeItem(key, 1);\r\n          //console.log(key);\r\n          //console.log(\"is being closed\");\r\n        } else {\r\n          closeItem(key, 0);\r\n          //console.log(key);\r\n          //console.log(\"is being opened\");\r\n        }\r\n      });\r\n    }\r\n\r\n    //console.log(inputList);\r\n    if(inputList[0].item!==''){\r\n      //console.log(\"NEW ITEM(S) ADDED\")\r\n      inputList.forEach(e => {\r\n        addItem(taskToUpdate.Issue_No, e.item);\r\n      })\r\n\r\n      setInputList([{item: \"\"}]);\r\n    }\r\n    \r\n\r\n    //closeItem(selectedIds, 1);\r\n  }\r\n\r\n  //States for closing tasks\r\n  const [reasons, setReasons] = useState([]);\r\n  const [reasonToClose, setReasonToClose] = useState([]);\r\n  const [closingMinutes, setClosingMinutes] = useState();\r\n  \r\n  const onSubmitCloseTask = () => {\r\n    handleCloseCloseTask();\r\n    \r\n    let closingNote = \"Task Closed: \" + reasonToClose.Reason\r\n    if(reasonToClose.Code!==undefined){\r\n      addNote(closingNote, taskID, UserID, closingMinutes);\r\n      closeTask(taskID, reasonToClose.Code, closingMinutes);\r\n    } else {\r\n      alert(\"Please select Reason for Closing Task\");\r\n      handleShowCloseTask();\r\n    }\r\n    \r\n    setTimeout(()=> {\r\n      setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code, urgentOnly, searchString).data);\r\n    },500)\r\n\r\n    setClosingMinutes();\r\n  }\r\n\r\n  const [timeSpent, setTimeSpent] = useState(0);\r\n  //Handles Show/Hide Modal for closing tasks\r\n  const handleCloseCloseTask = () => {\r\n    setShowCloseTask(false);\r\n    //alert(reasonToClose.Reason + \" \" + reasonToClose.Code);\r\n    setClosingMinutes(0);\r\n    setReasonToClose([]);\r\n    setTimeSpent(0);\r\n  }\r\n  const handleShowCloseTask = () => {\r\n    getTimeSpent(taskID)\r\n      .then(res=> {\r\n        //console.log(res[0].TimeSpent);\r\n        setTimeSpent(res[0].TimeSpent);\r\n        setShowCloseTask(true);\r\n      });    \r\n    \r\n    returnReasons()\r\n      .then(reasons => {\r\n        setReasons(reasons)\r\n      })  \r\n  }\r\n  //----------//\r\n\r\n  //Sets data for the rows that are checked\r\n  const [selected, setSelected] = useState({});\r\n  \r\n  const onSelectionChange = useCallback(({ selected }) => {\r\n    if(selected!==true){\r\n      setSelected(selected);\r\n    }\r\n\r\n    //console.log(JSON.stringify(toArray(selected)));\r\n    //console.log(selected)\r\n      \r\n  }, [])\r\n\r\n//For Items Grid\r\n  //Sets data for the rows that are checked\r\n  const [selectedItems, setSelectedItems] = useState();\r\n  \r\n  const onSelectionItemChange = useCallback(({ selected }) => {\r\n    \r\n    if(selected!==true){\r\n      setSelectedItems(selected);\r\n    }\r\n\r\n    //console.log(JSON.stringify(toArray(selected)));\r\n    //console.log(selectedItems);\r\n      \r\n  }, [])\r\n\r\n\r\n  //const [filterUserName, setFilterUserName] = useState(Username);\r\n  //const [filterPriority, setFilterPriority] = useState(1);\r\n\r\n\r\n  //----- GRID INFO -----//\r\n  //Default Sorting Info for the grid\r\n  const defaultSortInfo = { name: 'Task', dir: -1 }\r\n  //Column set-up for the grid\r\n  const columns = [\r\n    {name:'Task', header:'ID', type: 'number', defaultFlex: 1, maxWidth:70},\r\n    {name:'Customer', header:'Customer', defaultFlex: 1, maxWidth: 200, minWidth: 150},\r\n    {name:'Details', header:'Details', defaultFlex: 1, minWidth: 500},\r\n    {name:'Area', header:'Department', defaultFlex: 1, maxWidth: 130},\r\n    {name:'Application', header:'Ref 1', defaultFlex: 1, maxWidth: 100},\r\n    {name:'Reference2', header:'Ref 2', defaultFlex: 1, maxWidth: 100},\r\n    {name:'Last Comment', header:'Last Comment', defaultFlex: 1},\r\n    {name:'Requested', header:'Requested', defaultFlex: 1, maxWidth: 115, \r\n      sort: (a, b) => {\r\n        a = moment(a, 'DD/MM/YYYY', true).format();\r\n        b = moment(b, 'DD/MM/YYYY', true).format();\r\n\r\n        return new Date(a) - new Date(b);\r\n     }\r\n    },\r\n    {name:'Updated', header:'Updated', defaultFlex: 1, maxWidth: 115,\r\n      sort: (a, b) => {\r\n        a = moment(a, 'DD/MM/YYYY', true).format();\r\n        b = moment(b, 'DD/MM/YYYY', true).format();\r\n\r\n        return new Date(a) - new Date(b);\r\n      }\r\n    },\r\n    {name:'DueDate', header:'Due Date', defaultFlex: 1, maxWidth: 115,  \r\n      sort: (a, b) => {\r\n        a = moment(a, 'DD/MM/YYYY', true).format();\r\n        b = moment(b, 'DD/MM/YYYY', true).format();\r\n\r\n        return new Date(a) - new Date(b);\r\n      }\r\n    },\r\n    {name:'Mins', header:'Estimate', type: 'number', defaultFlex: 1, maxWidth: 120},\r\n    {name:'Invoice', header:'Invoice', type: 'number', defaultFlex: 1},\r\n    {name:'P', header:'P', type: 'number', defaultFlex: 1, maxWidth: 75},\r\n    {name:'ActionByUsername', header:'User', defaultFlex: 1},\r\n    {name:'Owner_Name', header:'Owner', defaultFlex: 1}\r\n  ]\r\n  //Styling that is used on main grid\r\n  const gridStyle = {\r\n    height: '100%', \r\n    marginRight: 10,\r\n    marginLeft: 10\r\n    //border: '1px solid black',\r\n    //boxShadow:  '0 0 8px 2px rgba(0, 0, 0)'\r\n  }\r\n\r\n  const historyStyle = {\r\n    minHeight: 400\r\n  }\r\n  const theme = 'default-dark'\r\n  //Column set-up for the 'history' grid\r\n  const itemsColumns = [\r\n    {name: 'ID', header: 'ID', defaultVisible:false},\r\n    {name: 'Details', header: 'Details', minWidth:730}\r\n  ]\r\n\r\n  const HQDetails={\r\n    'SupportCode' : 0,\r\n    'Customer_Code' : 340,\r\n    'CustomerName' : \"HQ Software\",\r\n    'CustomerCode': 340\r\n  }\r\n\r\n  const itemsStyle = {\r\n    minHeight: 400\r\n  }\r\n  const historyColumns = [\r\n    {name: 'Username', header: 'User'},\r\n    {name: 'Time', header: 'When'},\r\n    {name: 'Notes', header: 'Notes', minWidth: 315},\r\n    {name: 'Minutes', header: 'Minutes'}\r\n  ]\r\n\r\n  const createEmail = () => { \r\n    //Send email here\r\n    window.open(emailBody);\r\n  } \r\n  \r\n  const [showPrompt, setShowPrompt] = useState(false);\r\n  const handleClosePrompt = () => setShowPrompt(false);\r\n  \r\n  //Copy the selected Task\r\n  const copyTask = () => {\r\n    //console.log(taskToUpdate);\r\n    \r\n    handleClosePrompt();\r\n    \r\n    getNewTaskID().then(task=> {\r\n      setTaskID(task[0][\"\"])\r\n    \r\n      //console.log(task.[0].[\"\"]);\r\n      addNewTask(task[0][\"\"], taskToUpdate.Company_Name, taskToUpdate.Account, taskToUpdate.Details, taskToUpdate.Priority, taskToUpdate.DueDate, taskToUpdate.Requested, taskToUpdate.Department, taskToUpdate.Owner_Name, taskToUpdate.ActionBy, taskToUpdate.Reference, taskToUpdate.Reference3, taskToUpdate.Reference2, taskToUpdate.Notes, taskToUpdate.Reference4, taskToUpdate.Invoice, taskToUpdate.Urgent);\r\n      openHistory(task[0][\"\"], UserID);\r\n      //onTaskCreate(task.[0].[\"\"]);\r\n      setTaskToUpdate(prevTask => {\r\n        return { \r\n          ...prevTask, \r\n          Issue_No: task[0][\"\"]\r\n        }\r\n      })\r\n      let minutes = 0;\r\n      getHistory(task[0][\"\"])\r\n        .then(history => {  \r\n          setHistory(history);\r\n          //console.log(history);\r\n          history.forEach(item => {\r\n            minutes=minutes+item.Minutes\r\n          }); \r\n          setShow(true);\r\n      }) \r\n\r\n      \r\n      //Reload task data\r\n      setTimeout(()=> {\r\n        reLoadDataExt();\r\n        //setShow(true);\r\n      },300)\r\n    });\r\n\r\n  }\r\n\r\n  //Adding new Items to task\r\n\r\n  const [inputList, setInputList] = useState([{item: \"\"}]);\r\n    \r\n\r\n    // handle input change\r\n    const handleInputChange = (e, index) => {\r\n        const { name, value } = e.target;\r\n        const list = [...inputList];\r\n        list[index][name] = value;\r\n        setInputList(list);\r\n    };\r\n\r\n    // handle click event of the Remove button\r\n    const handleRemoveClick = index => {\r\n      const list = [...inputList];\r\n      list.splice(index, 1);\r\n      setInputList(list);\r\n    };\r\n\r\n    // handle click event of the Add button\r\n    const handleAddClick = () => {\r\n      setInputList([...inputList, { item: \"\"}]);\r\n    };\r\n\r\n  \r\n  return(\r\n    <>\r\n    <h5 className='task-amount-heading'>Total: {taskAmount}</h5>\r\n    <div className='filter-row'>\r\n      <div className='button-group-left'>\r\n        {/*New Task */}\r\n      <NewTask filterUser={filterUser}  filterDepartment={filterDepartment} filterCustomer={filterCustomer} onClick={reLoadDataExt}/>\r\n      {/* Edit Multiple */}\r\n      <MultiEdit selected={selected} onClick={reLoadDataExt}/> \r\n      {/* Clear Filters */}\r\n      <OverlayTrigger key='ClearFilters' placement='bottom'\r\n        overlay={\r\n          <Tooltip id='tooltip-clear'>\r\n            Clear Filters\r\n          </Tooltip>\r\n        }\r\n      >\r\n           <Button variant=\"secondary\" style={{margin:'5px'}}\r\n        \tonClick={ () => {\r\n            setFilterCustomer(AllCustomers);\r\n            setFilterUser(AllUsers);\r\n            //setFilterUserName(Username);\r\n            setFilterDepartment(AllDepartments);\r\n            document.getElementById('inline-radio-4-all').click();\r\n          }}\r\n        >\r\n          <MdCancel />\r\n        </Button>    \r\n      </OverlayTrigger>\r\n      {/* Re-Load Grid */}\r\n      <OverlayTrigger key='Refresh' placement='bottom'\r\n              overlay={\r\n                <Tooltip id='tooltip-refresh'>\r\n                  Refresh\r\n                </Tooltip>\r\n              }\r\n            >\r\n              <Button variant=\"secondary\" style={{margin:'5px'}}\r\n              onClick={() => {\r\n                setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code, urgentOnly, searchString).data);\r\n                //console.log(dataSource)\r\n              }}>\r\n                <IoReload/>\r\n              </Button>\r\n            </OverlayTrigger>\r\n      </div>\r\n       {/* Search Field */}\r\n       <Form.Control  value={searchString} style={{width:300, margin: '5px'}} placeholder='Search...'\r\n                onChange = {e=> {\r\n                  setSearchString(e.target.value);\r\n                  // console.log(e.target.value);\r\n                }}>\r\n              </Form.Control>\r\n      {/* Customer Select */}\r\n              <Form.Control as=\"select\" value={JSON.stringify(filterCustomer)} style={{width:300, margin: '5px'}}\r\n                onChange = {e=> {\r\n                  setFilterCustomer(JSON.parse(e.target.value));\r\n                  // console.log(e.target.value);\r\n                }}>\r\n              <option value={JSON.stringify(AllCustomers)}>{AllCustomers.CustomerName}</option>\r\n              <option value={JSON.stringify(HQDetails)}>{HQDetails.CustomerName}</option>\r\n              {\r\n                customers.map((customer, index) => {\r\n                  return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                })\r\n              }\r\n              </Form.Control>\r\n      {/* User Select */}\r\n      <Form.Control as=\"select\" value={JSON.stringify(filterUser)}  style={{width:150, margin: '5px'}}\r\n                onChange = {e=> {\r\n                  //let temp=JSON.parse(e.target.value);\r\n                  //setFilterUserName(temp.Username);\r\n                  setFilterUser(JSON.parse(e.target.value));\r\n                }}>\r\n              <option value ={JSON.stringify(currentUserObj)}>{currentUserObj.Username}</option>\r\n              {\r\n                users.map((user, index) => {\r\n                  if(user.Username!==currentUserObj.Username) {\r\n                    return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\r\n                  }\r\n                  else return null;\r\n                })\r\n              }\r\n              <option value={JSON.stringify(AllUsers)}>All Users</option>\r\n      </Form.Control>\r\n      {/* Department Select */}\r\n        <Form.Control as=\"select\" value={JSON.stringify(filterDepartment)} style={{width:200, margin: '5px'}}\r\n                    onChange = {e=> setFilterDepartment(JSON.parse(e.target.value))}>\r\n                  <option value={JSON.stringify(AllDepartments)}>{AllDepartments.Department}</option>\r\n                  {\r\n                    departments.map((department, index) => {\r\n                      return(<option key={index} value={JSON.stringify(department)}>{department.Department}</option>)\r\n                    })\r\n                  }\r\n        </Form.Control>\r\n      {/* Priority Radios */}\r\n        <div className='filter-P-radios' style={{margin: '5px'}}>\r\n        <Form.Check\r\n              inline\r\n              label=\"1\"\r\n              type=\"radio\"\r\n              name=\"group1\"\r\n              id={'inline-radio-1'}\r\n              onChange = {e=> setFilterPriority(1)} \r\n            />\r\n            <Form.Check\r\n              inline\r\n              label=\"2\"\r\n              type=\"radio\"\r\n              name=\"group1\"\r\n              id={'inline-radio-2'}\r\n              onChange = {e=> setFilterPriority(2)}             \r\n            />\r\n            <Form.Check\r\n              inline\r\n              label=\"3\"\r\n              type=\"radio\"\r\n              name=\"group1\"\r\n              id={'inline-radio-3'}\r\n              onChange = {e=> setFilterPriority(3)} \r\n            />\r\n            <Form.Check\r\n              inline\r\n              label=\"ALL\"\r\n              type=\"radio\"\r\n              name=\"group1\"\r\n              id={'inline-radio-4-all'}\r\n              onChange = {e=> setFilterPriority(0)} \r\n            />\r\n        </div>    \r\n      {/* Closed Checkbox */}\r\n      <Form.Check \r\n              type=\"checkbox\" \r\n              label=\"Closed\"\r\n              onChange = {e=> {\r\n                if (showingClosed===false) {\r\n                  setShowingClosed(true);\r\n                } else {\r\n                  setShowingClosed(false);\r\n                }\r\n              }}  \r\n              style={{margin: '5px'}}\r\n      />\r\n      {/* Urgent CheckBox */}\r\n      <Form.Check \r\n              type=\"checkbox\" \r\n              label=\"Urgent Only\"\r\n              onChange = {e=> {\r\n                if (urgentOnly===false) {\r\n                  setUrgentOnly(true);\r\n                } else {\r\n                  setUrgentOnly(false);\r\n                  \r\n                }\r\n              }}  \r\n              style={{margin: '5px'}}\r\n      />\r\n      <div className='button-group-right'>\r\n             {/* Summary */}\r\n      <Summary />\r\n      {/* Export to Excel */}\r\n      <OverlayTrigger key='CSVEXPORT' placement='bottom'\r\n              overlay={\r\n                <Tooltip id='tooltip-excel'>\r\n                  Export to Excel\r\n                </Tooltip>\r\n              }\r\n            >\r\n        <Button variant=\"secondary\"  style={{margin:'5px'}}\r\n        \tonClick={ () => {\r\n            const gridData = gridRef;\r\n            exportCSV(gridData);\r\n          }}\r\n          \r\n        >\r\n        <RiFileExcel2Line />\r\n        </Button>\r\n      </OverlayTrigger>\r\n      {/* Export to PDF */}\r\n      <OverlayTrigger key='PDFEXPORT' placement='bottom'\r\n        overlay={\r\n          <Tooltip id='tooltip-pdf'>\r\n            Export to PDF\r\n          </Tooltip>\r\n        } \r\n      >\r\n           <Button variant=\"secondary\" style={{margin:'5px'}}\r\n        \tonClick={ () => {\r\n            const gridData = gridRef;\r\n            exportPDF(gridData, filterCustomer);\r\n          }}\r\n         \r\n        >\r\n          <ImFilePdf />\r\n        </Button>    \r\n      </OverlayTrigger>\r\n      </div>\r\n     \r\n    \r\n    </div>\r\n      \r\n           \r\n            \r\n            \r\n            \r\n            \r\n          \r\n              <div className='grid-div'>\r\n\r\n      <ReactDataGrid\r\n        \r\n        rowClassName={rowClassName}\r\n        handle={setGridRef}\r\n        idProperty=\"Task\"\r\n        columns={columns}\r\n        dataSource={dataSource}\r\n        style={gridStyle}\r\n        theme={theme}\r\n        onRenderRow={onRenderRow}\r\n        selected={selected}\r\n        checkboxColumn\r\n        onSelectionChange={onSelectionChange}\r\n        defaultSortInfo={defaultSortInfo}\r\n        \r\n        />\r\n        </div>\r\n\r\n      \r\n      <Modal show={show} onHide={handleClose} size=\"lg\" backdrop=\"static\">\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Task: {taskID}</Modal.Title> \r\n          \r\n          <OverlayTrigger key='Make-Urgent' placement='bottom'\r\n        overlay={\r\n          <Tooltip id='tooltip-pdf'>\r\n            Mark/Unmark as Urgent\r\n          </Tooltip>\r\n        }\r\n      >\r\n        <Button variant =\"danger\" style={{Margin:10 , position:'absolute', left: 160}} \r\n          onClick={() => {\r\n            let input=null;\r\n              if(taskToUpdate.Urgent===null) {\r\n                input = 1;\r\n              } else {\r\n                input = null;\r\n              }\r\n            makeUrgent(taskID, input);\r\n            handleClose();\r\n            onSubmit();\r\n          }}\r\n          >\r\n            <FaExclamation/>\r\n          </Button>\r\n        </OverlayTrigger>\r\n        {\r\n          closedStatus==='C' &&\r\n          <Button variant =\"danger\" style={{Margin:10, position: 'absolute', left:210}}\r\n          onClick={() => {\r\n            handleClose();\r\n            reOpenTask(taskID);\r\n            setTimeout(() => {\r\n              setDataSource(LoadDataSource(filterUser.UserId, filterPriority, showingClosed, filterCustomer.Customer_Code, filterDepartment.Code, urgentOnly, searchString).data);\r\n            }, 50)\r\n            \r\n          }}\r\n          >Reopen Task</Button>\r\n        }\r\n        {\r\n          closedStatus==='O' &&\r\n          <OverlayTrigger key='close-task' placement='bottom'\r\n            overlay={\r\n              <Tooltip id='tooltip-close'>\r\n                Close this Task\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <Button variant=\"danger\" style={{Margin: 10, position: 'absolute', left:210}}\r\n            onClick={ () => {\r\n              handleClose(); \r\n              handleShowCloseTask();\r\n              onSubmit();\r\n              \r\n            }}\r\n            >\r\n              <AiFillCloseCircle/>\r\n            </Button>\r\n          </OverlayTrigger>\r\n          \r\n        }\r\n\r\n        {/* Export to PDF */}\r\n      <OverlayTrigger key='PDFEXPORT' placement='bottom'\r\n        overlay={\r\n          <Tooltip id='tooltip-pdf'>\r\n            Export history to PDF\r\n          </Tooltip>\r\n        } \r\n      >\r\n           <Button variant=\"secondary\" style={{position: 'absolute', right:200}}\r\n        \tonClick={ () => {\r\n            const gridData = historyRef;\r\n\r\n            //console.log(historyRef);\r\n            //console.log(taskToUpdate);\r\n            exportHistoryPDF(gridData, taskToUpdate);\r\n          }}\r\n         \r\n        >\r\n          <ImFilePdf />\r\n        </Button>    \r\n      </OverlayTrigger>\r\n\r\n        <OverlayTrigger key='save-task' placement='bottom'\r\n            overlay={\r\n              <Tooltip id='tooltip-save'>\r\n                Save Changes\r\n              </Tooltip>\r\n            }\r\n        >\r\n          <Button variant=\"secondary\" onClick={handleClose && onSubmit} style={{position: 'absolute', right:50}}>\r\n            <FaSave />\r\n          </Button>\r\n        </OverlayTrigger>\r\n\r\n          <OverlayTrigger key='send-email' placement='bottom'\r\n            overlay={\r\n              <Tooltip id='tooltip-email'>\r\n                Email Task\r\n              </Tooltip>\r\n            }\r\n          >\r\n            <Button variant='secondary' style={{position: 'absolute', right:100}} onClick={()=> createEmail()}>\r\n              <HiOutlineMail/>\r\n            </Button>\r\n        </OverlayTrigger>\r\n\r\n        <OverlayTrigger key='copy-task' placement='bottom'\r\n            overlay={\r\n              <Tooltip id='tooltip-save'>\r\n                Copy Task\r\n              </Tooltip>\r\n            }\r\n        >\r\n          <Button variant=\"secondary\" onClick={()=> {\r\n            setShowPrompt(true); \r\n            setShow(false);\r\n          }} style={{position: 'absolute', right:150}}>\r\n            <AiOutlineCopy />\r\n          </Button>\r\n        </OverlayTrigger>\r\n          \r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Tabs className=\"mb-3\" onSelect={(k) => { \r\n          if(k===\"editTask\"){\r\n            document.getElementById(`inline-editradio-${taskToUpdate.Priority}`).click();\r\n          }\r\n        }}>\r\n            <Tab eventKey=\"history\" title=\"History\">\r\n              <Form>\r\n                \r\n                <Form.Group className=\"mb-3\" controlId=\"addHistory\">\r\n                  <Form.Label>Add History:</Form.Label>\r\n                  <Form.Control \r\n                    as=\"textarea\" \r\n                    rows={3} \r\n                    placeholder=\"Add History...\"\r\n                    value={noteValue}\r\n                    onChange = {e=> setNoteValue(e.target.value)}\r\n                    type=\"text\"\r\n                  />\r\n                </Form.Group>\r\n\r\n                \r\n                <Form.Group className=\"mb-3\" controlId=\"closeTask.Minutes\">\r\n                <Form.Label>Add Time Spent:</Form.Label>\r\n                <Form.Control \r\n                  as=\"input\" \r\n                  rows={1}\r\n                  type=\"number\"\r\n                  placeholder=\"Minutes...\"\r\n                  value={historyMinutes}\r\n                  onChange = {e=> setHistoryMinutes(e.target.value)}/>\r\n            </Form.Group>\r\n              </Form>\r\n          \r\n              <ReactDataGrid \r\n                columns={historyColumns}\r\n                dataSource={history}\r\n                editable={true}\r\n                style={historyStyle}\r\n                handle={setHistoryRef}\r\n              />\r\n            </Tab>\r\n            <Tab eventKey=\"editTask\" title=\"Edit\">\r\n            <Form>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Group controlId=\"editTask.CustomerSelect\">\r\n                  <h7>Customer:</h7>\r\n                    <Form.Control size='sm' as=\"select\" value={customers.CustomerName}\r\n                      onChange = {e=> {\r\n                        setEditCustomer(JSON.parse(e.target.value));\r\n                      }}\r\n                    >\r\n                      <option>{taskToUpdate.Company_Name}</option>\r\n                      <option value={JSON.stringify(HQDetails)}>{HQDetails.CustomerName}</option>\r\n                      {\r\n                        customers.map((customer, index) => {\r\n                        return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                        })\r\n                      }\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group controlId=\"editTask.Department\">\r\n                  <Form.Label style={{display:'inline'}}>Department:</Form.Label>\r\n                    <Form.Control size='sm' as=\"select\" value={departments.Department}\r\n                      onChange = {e=> {\r\n                        setEditDepartment(JSON.parse(e.target.value))\r\n                        console.log(JSON.parse(e.target.value))  \r\n                      }}\r\n                    >\r\n                      <option value={JSON.stringify(departmentValue)}>{departmentValue.Department}</option>\r\n                      {\r\n                        departments.map((department, index) => {\r\n                        if(departmentValue.Department!==department.Department){\r\n                          return(<option key={index} value={JSON.stringify(department)}>{department.Department}</option>)\r\n                        }\r\n                        else return null;\r\n                        })\r\n                      }\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group controlId=\"editTask.UserSelect\">\r\n                    <Form.Label style={{display:'inline'}}>For:</Form.Label>\r\n                    <Form.Control size='sm' as=\"select\" value={users.UserName}\r\n                      onChange = {e=> {setEditUser(JSON.parse(e.target.value))\r\n                      //console.log(JSON.parse(e.target.value));\r\n                      }}\r\n                    >\r\n                      <option value={tasksUser}>{tasksUser.Username}</option>\r\n                      {\r\n                        users.map((user, index) => {\r\n                        if(tasksUser.Username!==user.Username){\r\n                          return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\r\n                        }\r\n                        else return null;\r\n                        })\r\n                      }\r\n                    </Form.Control>\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Group className=\"mb-3\" controlId=\"editTask.Details\">\r\n                    <Form.Label>Details:</Form.Label>\r\n                    <Form.Control \r\n                      as=\"textarea\" \r\n                      rows={3} \r\n                      placeholder=\"Details...\"\r\n                      value={taskToUpdate.Details}\r\n                      onChange = {e=> setTaskToUpdate(prevTask => {\r\n                        return { \r\n                          ...prevTask, \r\n                          Details: e.target.value\r\n                        }\r\n                      })}\r\n                      type=\"text\"\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group className=\"mb-3\" controlId=\"editTask.Notes\">\r\n                    <Form.Label>Notes:</Form.Label>\r\n                    <Form.Control \r\n                      as=\"textarea\" \r\n                      rows={3} \r\n                      placeholder=\"Notes...\"\r\n                      value={taskToUpdate.Notes}\r\n                      onChange = {e=> setTaskToUpdate(prevTask => {\r\n                        return { \r\n                          ...prevTask, \r\n                          Notes: e.target.value\r\n                        }\r\n                      })}\r\n                      type=\"text\"\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Label>Due Date:&nbsp;&nbsp;&nbsp;</Form.Label>\r\n                  <DatePicker \r\n                    selected={updateDueDate} \r\n                    onChange={(date) => setTaskToUpdate(prevTask => {\r\n                      setUpdateDueDate(new Date(date))\r\n\r\n                      return {\r\n                        ...prevTask,\r\n                        DueDate: moment(date).format('YYYY-MM-DDThh:mm:ss.000')\r\n                      }\r\n                    \r\n                    })} \r\n                    dateFormat = 'dd/MM/yyyy'\r\n                    calendarStartDay={1}\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <Form.Label>Requested Date:&nbsp;&nbsp;&nbsp;</Form.Label>\r\n                  <DatePicker \r\n                    selected={updateReqDate} \r\n                    onChange={(date) => setTaskToUpdate(prevTask => {\r\n                      setUpdateReqDate(date)\r\n\r\n                      return {\r\n                        ...prevTask,\r\n                        Requested: moment(date).format('YYYY-MM-DDThh:mm:ss.000')\r\n                      }\r\n                    }\r\n                    )}  \r\n                    dateFormat = 'dd/MM/yyyy'  \r\n                    calendarStartDay={1}\r\n                  />\r\n                </Col>\r\n                <Col>\r\n                  <Form.Label>Priority:&nbsp;&nbsp;</Form.Label>\r\n                    <br/>\r\n                  <Form.Check\r\n                    inline\r\n                    label=\"1\"\r\n                    type=\"radio\"\r\n                    name=\"group1\"\r\n                    id={'inline-editradio-1'}\r\n                    onChange = {e=> setTaskToUpdate(prevTask => {\r\n                      return { \r\n                        ...prevTask, \r\n                        Priority: 1\r\n                      }\r\n                    })} \r\n                  />\r\n                  <Form.Check\r\n                    inline\r\n                    label=\"2\"\r\n                    type=\"radio\"\r\n                    name=\"group1\"\r\n                    id={'inline-editradio-2'}\r\n                    onChange = {e=> setTaskToUpdate(prevTask => {\r\n                      return { \r\n                        ...prevTask, \r\n                        Priority: 2\r\n                      }\r\n                    })}             \r\n                  />\r\n                  <Form.Check\r\n                    inline\r\n                    label=\"3\"\r\n                    type=\"radio\"\r\n                    name=\"group1\"\r\n                    id={'inline-editradio-3'}\r\n                    onChange = {e=> setTaskToUpdate(prevTask => {\r\n                      return { \r\n                        ...prevTask, \r\n                        Priority: 3\r\n                      }\r\n                    })} \r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Group className=\"mb-3\" controlId=\"editTask.Section\" style={{marginTop: 15}}>\r\n                    <Form.Label>Reference 1:</Form.Label>\r\n                      <Form.Control \r\n                        as=\"textarea\" \r\n                        rows={1}\r\n                        type=\"text\"\r\n                        value={taskToUpdate.Reference}\r\n                        onChange = {e=> setTaskToUpdate(prevTask => {\r\n                          return { \r\n                            ...prevTask, \r\n                            Reference: e.target.value\r\n                          }\r\n                        })}                \r\n                      />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col>\r\n                  <Form.Group className=\"mb-3\" controlId=\"newTask.Area\" style={{marginTop: 15}}>\r\n                    <Form.Label>Reference 2:</Form.Label>\r\n                      <Form.Control \r\n                        as=\"textarea\" \r\n                        rows={1}\r\n                        type=\"text\"\r\n                        value={taskToUpdate.Reference2}\r\n                        onChange = {e=> setTaskToUpdate(prevTask => {\r\n                          return { \r\n                            ...prevTask, \r\n                            Reference2: e.target.value\r\n                          }\r\n                        })} \r\n                      />\r\n                  </Form.Group>\r\n                </Col>\r\n                \r\n              </Row>\r\n              <Row>\r\n                <Col>\r\n                  <Form.Group className=\"mb-3\" controlId=\"editTask.Contact\">\r\n                  <Form.Label>Requester:</Form.Label>\r\n                    <Form.Control \r\n                      as=\"textarea\" \r\n                      rows={1}\r\n                      type=\"text\"\r\n                      value={taskToUpdate.Reference3}\r\n                      onChange = {e=> setTaskToUpdate(prevTask => {\r\n                        return { \r\n                          ...prevTask, \r\n                          Reference3: e.target.value\r\n                        }\r\n                      })}                \r\n                    />\r\n                  </Form.Group> \r\n                </Col>\r\n                <Col>\r\n                  \t<Form.Group className=\"mb-3\" controlId=\"newTask.Estimate\">\r\n                    <Form.Label>Estimate:</Form.Label>\r\n                      <Form.Control \r\n                        as=\"textarea\" \r\n                        rows={1}\r\n                        type=\"text\"\r\n                        value={taskToUpdate.Estimate}\r\n                        onChange = {e=> setTaskToUpdate(prevTask => {\r\n                          return { \r\n                            ...prevTask, \r\n                            Estimate: e.target.value\r\n                          }\r\n                        })}                \r\n                      />\r\n                    </Form.Group> \r\n                </Col>\r\n                <Col>\r\n                  <Form.Group className=\"mb-3\" controlId=\"newTask.Invoice\">\r\n                  <Form.Label>Invoice:</Form.Label>\r\n                    <Form.Control \r\n                      as=\"textarea\" \r\n                      rows={1}\r\n                      type=\"text\"\r\n                      value={taskToUpdate.Invoice}\r\n                      onChange = {e=> setTaskToUpdate(prevTask => {\r\n                        return { \r\n                          ...prevTask, \r\n                          Invoice: e.target.value\r\n                        }\r\n                      })}                \r\n                    />\r\n                  </Form.Group> \r\n                </Col>\r\n              </Row>   \r\n          </Form> \r\n          <Form.Label>Items:</Form.Label>\r\n        {inputList.map((x, i) => {\r\n        return (\r\n          <div className=\"box\">\r\n            <Form.Group as={Row} controlId=\"newItems\" style={{marginTop: 5}}>\r\n                <Col>\r\n                <Form.Control\r\n                    size=\"sm\"\r\n                    as=\"textarea\" \r\n                    rows={1}\r\n                    type=\"text\"\r\n                    name=\"item\"\r\n                    value={x.item}\r\n                    onChange={e => handleInputChange(e, i)}\r\n                />\r\n                </Col>\r\n                <Col xs={1}>\r\n                    {inputList.length !== 1 && \r\n                      <OverlayTrigger key='RemoveItem' placement='bottom'\r\n                      overlay={\r\n                        <Tooltip id='tooltip-removeitem'>\r\n                          Remove Item\r\n                        </Tooltip>\r\n                      }\r\n                      > \r\n                        <Button size=\"sm\" className=\"mr10\" variant=\"secondary\" onClick={() => handleRemoveClick(i)}><BiMinus/></Button>\r\n                      </OverlayTrigger>\r\n                    }\r\n                </Col>\r\n                \r\n                <Col xs={1}>    \r\n                    {inputList.length - 1 === i && \r\n                      <OverlayTrigger key='AddItem' placement='bottom'\r\n                      overlay={\r\n                        <Tooltip id='tooltip-additem'>\r\n                          Add Item\r\n                        </Tooltip>\r\n                      }\r\n                      > \r\n                      <Button size=\"sm\" variant=\"secondary\" onClick={handleAddClick}><BiPlus/></Button>\r\n                      </OverlayTrigger>\r\n                    }\r\n                </Col>\r\n            </Form.Group>\r\n          </div>\r\n        );\r\n      })}        \r\n          \r\n\r\n         </Tab>\r\n         \r\n         <Tab eventKey=\"items\" title=\"Items\">\r\n         <ReactDataGrid \r\n                idProperty=\"ID\"\r\n                selected={selectedItems}\r\n                checkboxColumn\r\n                onSelectionChange={onSelectionItemChange}\r\n                columns={itemsColumns}\r\n                dataSource={itemDataSource}\r\n                style={itemsStyle}   \r\n                rowClassName={itemRowClassName}\r\n                editable={true}             \r\n          />\r\n\r\n\r\n              \r\n         </Tab>\r\n        </Tabs>\r\n          \r\n        </Modal.Body>\r\n      </Modal>\r\n\r\n      <Modal show={showCloseTask} onHide={handleCloseCloseTask}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Close Task: {taskID}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form.Group controlId=\"closeTask.ReasonSelect\">  \r\n            <Form.Control as=\"select\" value={reasons.Reason}\r\n                onChange = {e=> setReasonToClose(JSON.parse(e.target.value))}>\r\n                <option value={{}}>Select Close Reason . . .</option>\r\n              {\r\n                reasons.map((reason, index) => {\r\n                  return(<option key={index} value={JSON.stringify(reason)}>{reason.Reason}</option>)\r\n                })\r\n              }\r\n            </Form.Control>\r\n            </Form.Group>\r\n            <Form.Label>Time Spent: {timeSpent}</Form.Label>\r\n            <Form.Group className=\"mb-3\" controlId=\"closeTask.Minutes\">\r\n              <Form.Label>Additional Minutes:</Form.Label>\r\n                <Form.Control \r\n                  as=\"textarea\" \r\n                  rows={1}\r\n                  type=\"text\"\r\n                  value={closingMinutes}\r\n                  placeholder=\"Additional Minutes...\"\r\n                  onChange = {e=> setClosingMinutes(e.target.value)}                />\r\n            </Form.Group>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          \r\n          <Button variant=\"secondary\" onClick={handleCloseCloseTask}>\r\n            Cancel\r\n          </Button>\r\n          \r\n          <Button variant=\"danger\" onClick={handleCloseCloseTask && onSubmitCloseTask}>\r\n            Close Task\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n\r\n      <Modal show={showPrompt} onHide={handleClosePrompt}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Copying task {taskID}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Are you sure you want to copy Task: {taskID} ?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleClosePrompt}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleClosePrompt && copyTask}>\r\n            Yes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n     \r\n\r\n      \r\n    </>       \r\n    \r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Tasks;  ","import React, {  useState, useEffect} from 'react';\r\n\r\n//ReactDataGrid.io used for main grid\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\nimport '@inovua/reactdatagrid-community/base.css'\r\nimport '@inovua/reactdatagrid-community/index.css'\r\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\r\n\r\n\r\nasync function returnSupportSummary(customer) {\r\n    const response = await fetch('/returnSupportSummary/' + customer);\r\n    const customers = await response.json();\r\n    return customers\r\n}\r\n\r\nfunction SupportSummary(customer) {\r\n\r\n    const [dataSource, setDataSource] = useState([]);\r\n\r\n    const columns = [\r\n        {name:'Username', header:'User', type: 'strin', defaultFlex: 1},\r\n        {name:'Datetime', header:'When',  defaultFlex: 1},\r\n        {name:'Details', header:'Details', defaultFlex: 5, editable:true},\r\n        {name:'TimeSpent', header:'Time', defaultFlex: 1}\r\n    ]\r\n\r\n    const gridStyle = {\r\n        minHeight: 700, \r\n        marginRight: 10,\r\n        marginLeft: 10\r\n    }\r\n\r\n    const theme = 'default-dark'\r\n\r\n    useEffect(() => {\r\n        let mounted = true;\r\n    \r\n        //console.log(customer.customer);\r\n    \r\n        returnSupportSummary(customer.customer)\r\n            .then(summary => {\r\n              if(mounted) {\r\n                //console.log(summary);\r\n                setDataSource(summary);\r\n              }\r\n            })\r\n        //console.log(dataSource);\r\n        return () => mounted = false;\r\n    },[customer])\r\n    return(\r\n        <>\r\n        <ReactDataGrid\r\n        \r\n        //rowClassName={rowClassName}\r\n        //handle={setGridRef}\r\n        //idProperty=\"Task\"\r\n        columns={columns}\r\n        dataSource={dataSource}\r\n        style={gridStyle}\r\n        theme={theme}\r\n        //onRenderRow={onRenderRow}\r\n        //selected={selected}\r\n        //checkboxColumn\r\n        //onSelectionChange={onSelectionChange}\r\n        //defaultSortInfo={defaultSortInfo}\r\n                \r\n      />\r\n      </>\r\n    )\r\n}\r\n\r\nexport default SupportSummary;","import  React, {useEffect, useState, useRef}  from \"react\";\r\n\r\n//Bootstrap Used for buttons, modals and styling\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Form from 'react-bootstrap/Form'\r\n//import Row from 'react-bootstrap/Row'\r\n//import Col from 'react-bootstrap/Col'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\n\r\n//React-DatePicker used for date inputs\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport moment from 'moment'\r\n\r\nimport { FaSave } from 'react-icons/fa'\r\n\r\nimport SupportSummary from './SupportSummary.jsx'\r\n\r\n\r\nasync function returnCustomers() {\r\n    const response = await fetch('/returnCustomers');\r\n    const customers = await response.json();\r\n    return customers\r\n}\r\nasync function returnReasons() {\r\n    const response = await fetch('/returnSupportReasons');\r\n    const reasons = await response.json();\r\n    return reasons\r\n}\r\n\r\nfunction addQuickSupport(support, details, formatDate, minutes, phone, email, remote, siteVisit, outOfHours, Reason, UserID) {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        SupportCode: support,\r\n        User: UserID,\r\n        Date: formatDate,\r\n        Details: details,\r\n        Phone: phone,\r\n        Email: email,\r\n        Site: siteVisit,\r\n        Minutes: minutes,\r\n        Remote: remote,\r\n        Reason: Reason,\r\n        OutOfHours: outOfHours\r\n      })\r\n    }\r\n    return fetch('/addQuickSupport/', requestOptions)\r\n     \r\n  }\r\n\r\nfunction QuickSupport() {\r\n    document.title = 'HQ Business - Support';\r\n    //----- GET CURRENT USER -----//\r\n    const tokenString = sessionStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    //const Username = userToken.username;\r\n    const UserID = userToken.userId;\r\n\r\n    const AllCustomers = {\r\n        \"SupportCode\":0,\r\n        \"Customer_Code\":0,\r\n        \"CustomerName\":\"Select Customer\",\r\n        \"CustomerCode\":0\r\n    }\r\n    \r\n    const AllReasons = {Code: 0, Reason: 'Select Reason'}\r\n    \r\n    const [customer, setCustomer] = useState(AllCustomers);\r\n    const [customers, setCustomers] = useState([]);\r\n    const [details, setDetails] = useState(\"\");\r\n    const [date, setDate] = useState(new Date());\r\n    const [reasons, setReasons] = useState([]);\r\n    const [selectedReason, setSelectedReason] = useState(AllReasons);\r\n    const [minutes, setMinutes] = useState(0);\r\n    const [showOther, setShowOther] = useState(false);\r\n    const [phone, setPhone] = useState('N');\r\n    const [email, setEmail] = useState('N');\r\n    const [remote, setRemote] = useState('N');\r\n    const [siteVisit, setSiteVisit] = useState('N');\r\n    const [outOfHours, setOutOfHours] = useState('N');\r\n\r\n    const [validated, setValidated] = useState(false);\r\n    const formRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n\r\n        let mounted = true;\r\n\r\n        returnCustomers()\r\n            .then(customers => {\r\n                if(mounted) {\r\n                setCustomers(customers)\r\n                }\r\n            })\r\n        returnReasons()\r\n            .then(reasons => {\r\n              if(mounted) {\r\n                setReasons(reasons)\r\n              }  \r\n            })\r\n\r\n        return () => mounted = false;\r\n\r\n    },[])\r\n\r\n    \r\n    const onSubmit = () => {\r\n        //Set Date to correct format\r\n        var formatDate = moment(date).format('YYYY-MM-DD hh:mm:ss');\r\n\r\n        console.log(minutes);\r\n        if(customer.CustomerName===\"Select Customer\"){\r\n            alert(\"Please Select a Customer\");\r\n        } else if(details===\"\") {\r\n            alert(\"Please add Details\");\r\n        } else if(minutes===0) {\r\n            alert(\"Please add Time\");\r\n        } else if(selectedReason.Code===0) {\r\n            alert(\"Please Select a Reason\");\r\n        } else {\r\n            \r\n            addQuickSupport(customer.SupportCode, details, formatDate, minutes, phone, email, remote, siteVisit, outOfHours, selectedReason.Code, UserID);\r\n            handleReset();\r\n        }\r\n        \r\n        \r\n\r\n        \r\n    }\r\n\r\n    const handleReset = () => {\r\n        formRef.current.reset();\r\n        setValidated(false);\r\n\r\n        setDetails(\"\");\r\n        setDate(new Date());\r\n        setSelectedReason(AllReasons);\r\n        setMinutes(0);\r\n        setPhone('N');\r\n        setEmail('N');\r\n        setRemote('N');\r\n        setSiteVisit('N');\r\n        setOutOfHours('N');\r\n\r\n\r\n        let currentCustomer = customer;\r\n        setCustomer(AllCustomers);\r\n        setTimeout(()=>{\r\n            setCustomer(currentCustomer);\r\n        }, 50)\r\n    }\r\n\r\n\r\n    \r\n    return(\r\n        <>\r\n        <div style={{width:'35%',position: 'fixed', right: '60%', marginTop: '2%', marginBottom:'100'}}>\r\n        <Form ref={formRef} validated={validated}>\r\n        <Form.Group controlId=\"select.customer\">\r\n            <Form.Label>Customer: </Form.Label>\r\n            <Form.Control as=\"select\" value={JSON.stringify(customer)} style={{display:'inline', margin:5, width:'80%'}}\r\n                onChange = {e=> {\r\n                  setCustomer(JSON.parse(e.target.value));\r\n                  // console.log(e.target.value);\r\n                  \r\n                  document.getElementById('editTask.Details').focus();\r\n                \r\n                }}>\r\n              <option value={JSON.stringify(AllCustomers)}>{AllCustomers.CustomerName}</option>\r\n              {\r\n                customers.map((customer, index) => {\r\n                  return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                })\r\n              }\r\n            </Form.Control>\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" controlId=\"editTask.Details\">\r\n            <Form.Control \r\n                as=\"textarea\" \r\n                rows={5} \r\n                placeholder=\"Details...\"\r\n                value={details}\r\n                onChange = {e=> setDetails(e.target.value)}\r\n                type=\"text\"\r\n                style={{backgroundColor:'#fbff85'}}\r\n            />\r\n        </Form.Group>\r\n        <Form.Group>\r\n            <DatePicker \r\n                selected={date} \r\n                onChange={(date) => setDate(date)} \r\n                dateFormat = 'dd/MM/yyyy'\r\n                calendarStartDay={1}\r\n            />\r\n        </Form.Group>\r\n        <Form.Group>\r\n        <Form.Label>Minutes:&nbsp;&nbsp;&nbsp;</Form.Label>\r\n            <Form.Check\r\n                inline\r\n                label=\"5\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-5m`}\r\n                onChange={e=> {\r\n                    setMinutes(5);\r\n                    setShowOther(false);\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"10\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-10m`}\r\n                onChange={e=> {\r\n                    setMinutes(10);\r\n                    setShowOther(false);\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"15\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-15m`}\r\n                onChange={e=> {\r\n                    setMinutes(15);\r\n                    setShowOther(false);\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"30\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-30m`}\r\n                onChange={e=> {\r\n                    setMinutes(30);\r\n                    setShowOther(false);\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"45\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-45m`}\r\n                onChange={e=> {\r\n                    setMinutes(45);\r\n                    setShowOther(false);\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"60\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-60m`}\r\n                onChange={e=> {\r\n                    setMinutes(60);\r\n                    setShowOther(false);\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"90\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-90m`}\r\n                onChange={e=> {\r\n                    setMinutes(90);\r\n                    setShowOther(false);\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"120\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-120m`}\r\n                onChange={e=> {\r\n                    setMinutes(120);\r\n                    setShowOther(false);\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"Other\"\r\n                name=\"group1\"\r\n                type='radio'\r\n                id={`inline-radio-other`}\r\n                onChange={e=> {\r\n                    setMinutes();\r\n                    setShowOther(true);\r\n                }}\r\n            />\r\n            {\r\n                showOther===true &&\r\n                <Form.Control \r\n                as=\"textarea\" \r\n                rows={1} \r\n                placeholder=\"Minutes\"\r\n                value={minutes}\r\n                onChange = {e=> setMinutes(e.target.value)}\r\n                type=\"text\"\r\n                style={{position:'absolute', right:0,  width: 120, display: 'inline'}}\r\n                />\r\n            }\r\n        </Form.Group>\r\n        <Form.Group>\r\n            <Form.Label>Actions: &nbsp;&nbsp;&nbsp;</Form.Label>\r\n            <Form.Check\r\n                inline\r\n                label=\"Phone\"\r\n                name=\"group2\"\r\n                type='checkbox'\r\n                id={`inline-check-phone`}\r\n                onChange = {e=> {\r\n                    if (phone==='N') {\r\n                      setPhone('Y');\r\n                    } else {\r\n                      setPhone('N');\r\n                    }\r\n                }} \r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"Email\"\r\n                name=\"group2\"\r\n                type='checkbox'\r\n                id={`inline-check-email`}\r\n                onChange = {e=> {\r\n                    if (email==='N') {\r\n                      setEmail('Y');\r\n                    } else {\r\n                      setEmail('N');\r\n                    }\r\n                }} \r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"Remote Access\"\r\n                name=\"group2\"\r\n                type='checkbox'\r\n                id={`inline-check-remote`}\r\n                onChange = {e=> {\r\n                    if (remote==='N') {\r\n                      setRemote('Y');\r\n                    } else {\r\n                      setRemote('N');\r\n                    }\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"Site Visit\"\r\n                name=\"group2\"\r\n                type='checkbox'\r\n                id={`inline-check-sitevisit`}\r\n                onChange = {e=> {\r\n                    if (siteVisit==='N') {\r\n                      setSiteVisit('Y');\r\n                    } else {\r\n                      setSiteVisit('N');\r\n                    }\r\n                }}\r\n            />\r\n            <Form.Check\r\n                inline\r\n                label=\"Out of Hours\"\r\n                name=\"group2\"\r\n                type='checkbox'\r\n                id={`inline-check-outofhours`}\r\n                onChange = {e=> {\r\n                    if (outOfHours==='N') {\r\n                      setOutOfHours('Y');\r\n                    } else {\r\n                      setOutOfHours('N');\r\n                    }\r\n                }}\r\n            />\r\n        </Form.Group>\r\n        <Form.Group controlId=\"support.ReasonSelect\">  \r\n            <Form.Label>Reason: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</Form.Label>\r\n            <Form.Control as=\"select\" value={reasons.Reason} style={{display:'inline', margin:5, width:'80%'}}\r\n                onChange = {e=> setSelectedReason(JSON.parse(e.target.value))}>\r\n                <option value={AllReasons}>{AllReasons.Reason}</option>\r\n              {\r\n                reasons.map((reason, index) => {\r\n                  return(<option key={index} value={JSON.stringify(reason)}>{reason.Reason}</option>)\r\n                })\r\n              }\r\n            </Form.Control>\r\n        </Form.Group>\r\n        <OverlayTrigger key='save-task' placement='bottom'\r\n            overlay={\r\n              <Tooltip id='tooltip-save'>\r\n                Save\r\n              </Tooltip>\r\n            }\r\n        >\r\n            <Button onClick={onSubmit} className=\"button-to-the-right\" variant=\"secondary\" >\r\n                <h4><FaSave /></h4>\r\n            </Button>\r\n        </OverlayTrigger>\r\n        \r\n        </Form>\r\n        </div>\r\n        <div style={{width:'40%',position: 'absolute', left: '50%', marginTop: '2%'}}>\r\n            <SupportSummary customer={customer.SupportCode} />\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuickSupport;","import  React, {useEffect, useState}  from \"react\";\r\n\r\nimport {returnCustomers, returnUsers} from '../../Tasks/returnTasks';\r\nimport moment from 'moment'\r\n//ReactDataGrid.io used for main grid\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\nimport '@inovua/reactdatagrid-community/base.css'\r\nimport '@inovua/reactdatagrid-community/index.css'\r\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport Button from 'react-bootstrap/Button'\r\nimport {ImFilePdf} from 'react-icons/im'\r\nimport {IoReload} from 'react-icons/io5'\r\n\r\n\r\n\r\n//React-DatePicker used for date inputs\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nimport { exportClosedPDF } from '../../excelExport.js'\r\nimport '../Report1.css'\r\nimport { LoadDataSource } from \"../../Tasks/LoadDataSource\";\r\n\r\n\r\nfunction getClosedTasks(customer, user, startDate, endDate) {\r\n    \r\n  \r\n  \r\n  return fetch('/getCloseTaskGrid/' + customer + '&' + user + '&' + startDate + '&' + endDate)\r\n     .then(data => data.json())\r\n  }\r\n\r\nfunction Closed() {\r\n  //----- GET CURRENT USER -----//\r\n    const tokenString = sessionStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    //const Username = userToken.username;\r\n    //const UserID = userToken.userId;\r\n\r\n    const AllCustomers = {\r\n        \"SupportCode\":0,\r\n        \"Customer_Code\":0,\r\n        \"CustomerName\":\"All Customers\",\r\n        \"CustomerCode\":0\r\n      }\r\n      //const AllDepartments = {\r\n      //  'Code': 0,\r\n      //  'Department': 'All Departments'\r\n      //}\r\n      const AllUsers = {\r\n        'Username': 'None Selected',\r\n        'UserId': 0\r\n      }\r\n      const currentUserObj = {\r\n        'UserId': userToken.userId,\r\n        'Username':  userToken.username\r\n      }\r\n\r\n    \r\n\r\n    const HQDetails={\r\n        'SupportCode' : 0,\r\n        'Customer_Code' : 340,\r\n        'CustomerName' : \"HQ Software\",\r\n        'CustomerCode': 340\r\n    }\r\n\r\n    \r\n    const [dataSource, setDataSource] = useState([]);\r\n\r\n    //Store reference to grid for exporting PDF/CSV\r\n    const [gridRef, setGridRef] = useState(null);\r\n\r\n    //setting departments/users/customers for drop downs\r\n    //const [departments, setDepartments] = useState([]);\r\n    const [customers, setCustomers] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n\r\n    const [filterUser, setFilterUser] = useState(currentUserObj);\r\n    const [filterCustomer, setFilterCustomer] = useState(AllCustomers);\r\n    //const [filterDepartment, setFilterDepartment] = useState(AllDepartments);\r\n\r\n    //Dates for DateRange\r\n    var tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate()+1);\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(tomorrow);\r\n\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        \r\n        \r\n        LoadData(startDate, endDate, filterCustomer, filterUser);\r\n        \r\n        \r\n        returnCustomers()\r\n        .then(customers => {\r\n            if(mounted) {\r\n          setCustomers(customers)\r\n            }\r\n        })\r\n        //returnDepartments()\r\n        //  .then(departments => {\r\n        //    if(mounted) {\r\n        //      setDepartments(departments);\r\n        //    }\r\n        //  })\r\n        returnUsers()\r\n          .then(users => { \r\n            if(mounted) {\r\n              setUsers(users)\r\n            }\r\n          })\r\n\r\n          return () => mounted = false;\r\n    },[filterUser, filterCustomer.Customer_Code, startDate, endDate])\r\n    \r\n    //Grid Info\r\n    const theme = 'default-dark'\r\n\r\n    const gridStyle = {\r\n      minHeight: '80vh'\r\n    }\r\n\r\n    const columns = [\r\n        {name:'Task', header:'ID', type: 'number', defaultFlex: 1, maxWidth:70},\r\n        {name:'Customer', header:'Customer', defaultFlex: 1, maxWidth: 200, minWidth: 150},\r\n        {name:'Details', header:'Details', defaultFlex: 1, minWidth: 500},\r\n        {name:'Owner_Name', header:'Owner', defaultFlex: 1},\r\n        {name:'ActionByUsername', header:'Allocated To', defaultFlex: 1},\r\n        {name:'Requested', header:'Requested', defaultFlex: 1, maxWidth: 115, \r\n          sort: (a, b) => {\r\n            a = moment(a, 'DD/MM/YYYY', true).format();\r\n            b = moment(b, 'DD/MM/YYYY', true).format();\r\n    \r\n            return new Date(a) - new Date(b);\r\n         }\r\n        },\r\n        {name:'DateCompleted', header:'Date Complete', defaultFlex: 1, maxWidth: 115, \r\n          sort: (a, b) => {\r\n            a = moment(a, 'DD/MM/YYYY', true).format();\r\n            b = moment(b, 'DD/MM/YYYY', true).format();\r\n    \r\n            return new Date(a) - new Date(b);\r\n         }\r\n        },\r\n        {name:'Estimate', header:'Estimate', defaultFlex: 1, maxWidth: 130},\r\n        {name:'TimeSpent', header:'Minutes Spent', defaultFlex: 1, maxWidth: 100},\r\n        {name:'DaysToComplete', header:'Days To Complete', defaultFlex: 1, maxWidth: 100}\r\n    ]\r\n\r\n    const LoadData = (startDate, endDate, filterCustomer, filterUser) => {\r\n      var sDate = moment(startDate).format('YYYY-MM-DDT00:00:00');\r\n      var eDate = moment(endDate).format('YYYY-MM-DDT11:59:59');\r\n\r\n\r\n      let data = getClosedTasks(filterCustomer.Customer_Code, filterUser.UserId, sDate, eDate);\r\n      //console.log(data);\r\n      setDataSource(data);\r\n    }\r\n\r\n    return (\r\n        <div class=\"closed-report\">\r\n          \r\n          <div className=\"first-row\">\r\n              \r\n              <div className=\"item\">\r\n                <h1 class=\"font-weight-light\">Closed Tasks</h1>    \r\n              </div>\r\n\r\n              <div className=\"item\">\r\n                 \r\n                  <Form.Control as=\"select\" value={JSON.stringify(filterCustomer)}\r\n                    onChange = {e=> {\r\n                      setFilterCustomer(JSON.parse(e.target.value));\r\n                      //console.log(e.target.value);\r\n                    }}>\r\n                  <option value={JSON.stringify(AllCustomers)}>{AllCustomers.CustomerName}</option>\r\n                  <option value={JSON.stringify(HQDetails)}>{HQDetails.CustomerName}</option>\r\n                  {\r\n                    customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                  }\r\n                  </Form.Control>\r\n                \r\n              </div>\r\n                \r\n              <div className=\"item\">\r\n                <Form.Control as=\"select\" value={JSON.stringify(filterUser)}\r\n                    onChange = {e=> {\r\n                      //let temp=JSON.parse(e.target.value);\r\n                      //setFilterUserName(temp.Username);\r\n                      setFilterUser(JSON.parse(e.target.value));\r\n                    }}>\r\n                  <option value ={JSON.stringify(currentUserObj)}>{currentUserObj.Username}</option>\r\n                  {\r\n                    users.map((user, index) => {\r\n                      if(user.Username!==currentUserObj.Username) {\r\n                        return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\r\n                      }\r\n                      else return null;\r\n                    })\r\n                  }\r\n                  <option value={JSON.stringify(AllUsers)}>All Users</option>\r\n                </Form.Control>\r\n              </div>\r\n                \r\n            \r\n              <div class=\"item\">\r\n                <DatePicker\r\n                selected={startDate}\r\n                onChange={(date) => {\r\n                  setStartDate(date);\r\n                }}\r\n                selectsStart\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                dateFormat = 'dd/MM/yyyy'\r\n                />\r\n              </div>\r\n            \r\n              <div class=\"item\">\r\n                <DatePicker\r\n                selected={endDate}\r\n                onChange={(date) => {\r\n                  setEndDate(date);\r\n                }}\r\n                selectsEnd\r\n                startDate={startDate}\r\n                endDate={endDate}\r\n                minDate={startDate}\r\n                dateFormat = 'dd/MM/yyyy'\r\n                />\r\n              </div>\r\n          \r\n              <div className=\"item\">\r\n                <OverlayTrigger key='PDFEXPORT'\r\n                  overlay={\r\n                  <Tooltip id='tooltip-pdf'>\r\n                  Export to PDF\r\n                  </Tooltip>\r\n                  } \r\n                >\r\n                  <Button variant=\"secondary\"\r\n              \t    onClick={ () => {\r\n                      const gridData = gridRef;\r\n                      exportClosedPDF(gridData, filterCustomer);\r\n                      //console.log(gridData);\r\n                    }}\r\n                    \r\n                  >\r\n                    <ImFilePdf />\r\n                  </Button>    \r\n                </OverlayTrigger>\r\n              \r\n                <OverlayTrigger key='refresh' \r\n                  overlay={\r\n                  <Tooltip id='tooltip-refresh'>\r\n                    Refresh\r\n                  </Tooltip>\r\n                  } \r\n                >\r\n                  <Button variant=\"secondary\" style={{marginLeft:'10px'}}\r\n              \t    onClick={ () => {\r\n                      LoadData(startDate, endDate, filterCustomer, filterUser);\r\n                    }}\r\n                    \r\n                  >\r\n                    <IoReload />\r\n                  </Button>    \r\n                </OverlayTrigger>\r\n              </div>\r\n          </div>\r\n            \r\n        \r\n          <div className=\"closed-grid\">\r\n            <ReactDataGrid\r\n              //rowClassName={rowClassName}\r\n              handle={setGridRef}\r\n              idProperty=\"Task\"\r\n              columns={columns}\r\n              dataSource={dataSource}\r\n              style={gridStyle}\r\n              theme={theme}\r\n              //onRenderRow={onRenderRow}\r\n              //selected={selected}\r\n              //checkboxColumn\r\n              //onSelectionChange={onSelectionChange}\r\n              //defaultSortInfo={defaultSortInfo}\r\n            />\r\n          </div>\r\n        \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Closed;","import React, { useState, useEffect, PureComponent } from \"react\";\r\n\r\n//React-DatePicker used for date inputs\r\nimport DatePicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport moment from 'moment'\r\nimport Form from 'react-bootstrap/Form'\r\nimport '../Report1.css'\r\nimport {returnUsers} from '../../Tasks/returnTasks.js'\r\n\r\n//Charts\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Label, ResponsiveContainer } from 'recharts';\r\n\r\nimport { TailSpin } from  'react-loader-spinner'\r\n\r\n\r\n\r\n\r\nfunction getTimeSpent(startDate, endDate, filterUser) {\r\n  return fetch('/getTimeReport/'+startDate+'&'+endDate+'&'+filterUser)\r\n    .then(data => data.json())\r\n}\r\nfunction getUserTimeSpent(startDate, endDate) {\r\n  return fetch('/getUserTimeReport/'+startDate+'&'+endDate)\r\n    .then(data => data.json())\r\n}\r\n\r\nclass CustomizedAxisTick extends PureComponent {\r\n  render() {\r\n    const { x, y, stroke, payload } = this.props;\r\n\r\n    return (\r\n      <g transform={`translate(${x},${y})`}>\r\n        <text x={0} y={0} dy={5} textAnchor=\"start\" fill=\"#666\" transform=\"rotate(90)\">\r\n          {payload.value}\r\n        </text>\r\n      </g>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Reports() {\r\n    \r\n  \r\n    var tomorrow = new Date();\r\n    tomorrow.setDate(tomorrow.getDate()+1);\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(tomorrow);\r\n    const [loading, setLoading] = useState(true);\r\n    const [loadingUser, setLoadingUser] = useState(true);\r\n    const [users, setUsers] = useState([]);\r\n    const [chartType, setChartType] = useState(3);\r\n\r\n    \r\n    \r\n    //----- GET CURRENT USER -----//\r\n    const tokenString = sessionStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    //const Username = userToken.username;\r\n\r\n    const currentUserObj = {\r\n        'UserId': userToken.userId,\r\n        'Username':  userToken.username\r\n    }\r\n    const [filterUser, setFilterUser] = useState(currentUserObj);\r\n\r\n    const [data, setData] = useState([]);\r\n    const [userData, setUserData] = useState([]);\r\n    \r\n\r\n    useEffect(()=> {\r\n      \r\n      setLoading(true);\r\n      setLoadingUser(true);\r\n      var sDate = moment(startDate).format('YYYY-MM-DDT00:00:00');\r\n      var eDate = moment(endDate).format('YYYY-MM-DDT11:59:59');\r\n\r\n      getTimeSpent(sDate, eDate, filterUser.UserId).then(report=> {\r\n        setData(report);\r\n        setLoading(false);\r\n      })\r\n\r\n      getUserTimeSpent(sDate, eDate).then(report=> {\r\n        setUserData(report);\r\n        setLoadingUser(false);\r\n      })\r\n\r\n      returnUsers()\r\n      .then(users => { \r\n          setUsers(users)     \r\n      }) \r\n\r\n      if(chartType===1) {\r\n        document.getElementById(\"inline-radio-1\").click();\r\n      }\r\n      if(chartType===2) {\r\n        document.getElementById(\"inline-radio-2\").click();\r\n      }\r\n      if(chartType===3) {\r\n        document.getElementById(\"inline-radio-3\").click();\r\n      }\r\n\r\n      console.log(userData);\r\n    }, [startDate, endDate, filterUser]) \r\n\r\n    const AllUsers = {\r\n      'Username': 'none',\r\n      'UserId': '0'\r\n    }\r\n    \r\n\r\n    let selectedChart;\r\n    if(chartType===3){\r\n      selectedChart = <div className=\"bar-chart-wrap \">\r\n                        <div className=\"main-chart item\">\r\n                          \r\n                          <BarChart width={1100} height={700} data={data}>\r\n                            <CartesianGrid  />\r\n                            <XAxis dataKey=\"Customer\" height={250} interval={0} tick={<CustomizedAxisTick/>} />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n\r\n                            <Bar dataKey=\"SupportTime\" fill=\"#202c40\" maxBarSize={50} />\r\n                            <Bar dataKey=\"TaskTime\" fill=\"#c9b428\" maxBarSize={50} />\r\n                          </BarChart> \r\n                          </div>\r\n                    <div className=\"user-chart item\">\r\n                    <BarChart width={400} height={400} data={userData}>\r\n                            <CartesianGrid  />\r\n                            <XAxis dataKey=\"Username\" height={150} interval={0} tick={<CustomizedAxisTick/>} />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n\r\n                            <Bar dataKey=\"SupportMinutes\" fill=\"#202c40\" maxBarSize={50} />\r\n                            <Bar dataKey=\"TaskMinutes\" fill=\"#c9b428\" maxBarSize={50} />\r\n                          </BarChart> \r\n                    </div>\r\n                  </div>;\r\n\r\n    } else if (chartType===2) {\r\n      selectedChart = <div className=\"bar-chart-wrap \">\r\n                        <div className=\"main-chart item\">\r\n                          <BarChart width={1100} height={700} data={data}>\r\n                            <CartesianGrid  />\r\n                            <XAxis dataKey=\"Customer\" height={150} interval={0} tick={<CustomizedAxisTick/>} />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                        \r\n                            <Bar dataKey=\"TaskTime\" fill=\"#c9b428\" maxBarSize={50}/>\r\n                          </BarChart>\r\n                          </div>\r\n                    <div className=\"user-chart item\">\r\n                    <BarChart width={400} height={400} data={userData}>\r\n                            <CartesianGrid  />\r\n                            <XAxis dataKey=\"Username\" height={40} interval={0} tick={<CustomizedAxisTick/>} />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n\r\n                            \r\n                            <Bar dataKey=\"TaskMinutes\" fill=\"#c9b428\" maxBarSize={50} />\r\n                          </BarChart> \r\n                    </div>\r\n                  </div>;\r\n\r\n    } else if (chartType===1) {\r\n      selectedChart = \r\n                  <div className=\"bar-chart-wrap \">\r\n                    <div className=\"main-chart item\"> \r\n\r\n                      <BarChart width={1100} height={700} data={data}>\r\n                        <CartesianGrid  />\r\n                        <XAxis dataKey=\"Customer\" height={150} interval={0} tick={<CustomizedAxisTick/>} />\r\n                        <YAxis />\r\n                        <Tooltip />\r\n\r\n                        <Bar dataKey=\"SupportTime\" fill=\"#202c40\" maxBarSize={50}/>\r\n                        \r\n                      </BarChart> \r\n                      \r\n                    </div>\r\n                    <div className=\"user-chart item\">\r\n                        <BarChart width={400} height={400} data={userData}>\r\n                          <CartesianGrid  />\r\n                          <XAxis dataKey=\"Username\" height={50} interval={0} tick={<CustomizedAxisTick/>} />\r\n                          <YAxis />\r\n                          <Tooltip />\r\n                          <Bar dataKey=\"SupportMinutes\" fill=\"#202c40\" maxBarSize={50} />\r\n                         \r\n                        </BarChart> \r\n                    </div>\r\n                  </div> ;\r\n    }\r\n\r\n\r\n    let chartLoaded;\r\n\r\n    //console.log(data.length);\r\n    if(loading===false) {\r\n      if(data.length===0){\r\n        chartLoaded = <div className=\"bar-chart-wrap spinner\">\r\n                        <h3>No Data for this selection</h3>\r\n                      </div>;\r\n      } else {\r\n        chartLoaded = selectedChart;\r\n      }\r\n\r\n    } else {\r\n      chartLoaded = \r\n      <div className=\"bar-chart-wrap spinner\">\r\n        <TailSpin color=\"#282c34\" height={200} width={200} ariLabel='Loading'/>\r\n      </div>\r\n    }\r\n\r\n    \r\n      \r\n  \r\n  return (\r\n    <div class=\"time-report\">\r\n        <div className=\"first-row\">\r\n          <h1 class=\"font-weight-light heading item\" >Time Spent</h1>\r\n            \r\n            <div class=\"date item\">\r\n            <DatePicker\r\n              selected={startDate}\r\n              onChange={(date) => {\r\n                setStartDate(date);\r\n              }}\r\n              selectsStart\r\n              startDate={startDate}\r\n              endDate={endDate}\r\n              dateFormat = 'dd/MM/yyyy'\r\n              />\r\n            </div>\r\n            \r\n            <div class=\"date item\">\r\n            <DatePicker\r\n              selected={endDate}\r\n              onChange={(date) => {\r\n                setEndDate(date);\r\n              }}\r\n              selectsEnd\r\n              startDate={startDate}\r\n              endDate={endDate}\r\n              minDate={startDate}\r\n              dateFormat = 'dd/MM/yyyy'\r\n              />\r\n            \r\n            </div>\r\n            \r\n            <div className=\"item radios\">\r\n              <Form.Check\r\n                inline\r\n                label=\"Support\"\r\n                type=\"radio\"\r\n                name=\"group1\"\r\n                id={'inline-radio-1'}\r\n                onChange = {e=> setChartType(1)} \r\n              />\r\n              <Form.Check\r\n                inline\r\n                label=\"Tasks\"\r\n                type=\"radio\"\r\n                name=\"group1\"\r\n                id={'inline-radio-2'}\r\n                onChange = {e=> setChartType(2)}             \r\n              />\r\n              <Form.Check\r\n                inline\r\n                label=\"Both\"\r\n                type=\"radio\"\r\n                name=\"group1\"\r\n                id={'inline-radio-3'}\r\n                onChange = {e=> setChartType(3)} \r\n              />\r\n            </div>\r\n\r\n            <div className=\"user-select item\">\r\n\r\n              <Form.Control as=\"select\" value={users.Username}  \r\n                  onChange = {e=> {\r\n                    let temp=JSON.parse(e.target.value);\r\n                    setFilterUser(temp);\r\n                  }}>\r\n                <option value ={JSON.stringify(currentUserObj)}>{currentUserObj.Username}</option>\r\n                {\r\n                  users.map((user, index) => {\r\n                    if(user.Username!==currentUserObj.Username) {\r\n                      return(<option key={index} value={JSON.stringify(user)}>{user.Username}</option>)\r\n                    }\r\n                    else return null;\r\n                  })\r\n                }\r\n                <option value={JSON.stringify(AllUsers)}>All Users</option>\r\n                </Form.Control>\r\n            </div>\r\n\r\n            \r\n            \r\n        </div>\r\n                \r\n        {chartLoaded}\r\n\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Reports","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nimport './custom.scss'\r\nimport { ProSidebar, Menu, MenuItem, SidebarContent } from 'react-pro-sidebar';\r\n//import 'react-pro-sidebar/dist/css/styles.css';\r\n\r\nimport { GoIssueClosed } from 'react-icons/go'\r\nimport { BiTimeFive } from 'react-icons/bi'\r\nimport { AiOutlineSchedule } from 'react-icons/ai'\r\n\r\n\r\n\r\nfunction ReportMenu() {\r\n\r\n    \r\n    \r\n    return(\r\n    <ProSidebar breakpoint=\"xl\">\r\n      <SidebarContent>\r\n        <Menu iconShape=\"circle\">\r\n        \r\n        \r\n        <MenuItem icon={<BiTimeFive/>}>\r\n            Time Spent\r\n        <Link to=\"/Report1\" />\r\n        </MenuItem>\r\n        <MenuItem icon={<GoIssueClosed />}>\r\n            Closed Tasks\r\n        <Link to=\"/Report1/Closed\" />\r\n        </MenuItem>\r\n        <MenuItem icon={<AiOutlineSchedule />}>\r\n            Schedule\r\n        <Link to=\"/Report1/Schedule\" />\r\n        </MenuItem>\r\n      </Menu>\r\n      </SidebarContent>\r\n      <div style={{height: '80vh', display: 'inline'}}></div>\r\n      \r\n    </ProSidebar>\r\n    ) \r\n}\r\n\r\nexport default ReportMenu;","import React, { useEffect, useState, PureComponent } from 'react'\r\nimport './schedule.css'\r\nimport moment from 'moment'\r\n//ReCharts\r\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport { TailSpin } from  'react-loader-spinner'\r\n\r\n\r\nconst getScheduledTime = (startDate, endDate) => {\r\n    return fetch('/getScheduledTimeByWeek/'+startDate+'&'+endDate)\r\n    .then(data => data.json())\r\n}\r\n\r\nconst pushNewWeek = (dataArray, number, weekDay) => {\r\n    \r\n\r\n        var curr = new Date; // get current date\r\n        var first = (curr.getDate()+weekDay) - curr.getDay()+1; // First day is the day of the month - the day of the week\r\n        //var last = first + 6; // last day is the first day + 6\r\n        var sDate = moment(curr.setDate(first)).format('YYYY-MM-DDT00:00:00');\r\n        //var eDate = moment(curr.setDate(last)).format('YYYY-MM-DDT11:59:59');\r\n\r\n        var date = moment(curr).format(\"DD-MM\");\r\n        let newest = {\r\n            Week: date, \r\n            Richard: 0,\r\n            Wesley: 0,\r\n            Stephen: 0,\r\n            Neil: 0,\r\n            Gavin: 0\r\n        }\r\n\r\n    getScheduledTime(sDate).then(res => {\r\n        res.map((x) => {\r\n            //console.log(x);\r\n            if(x.Username==='Richard'){\r\n                newest.Richard = x.Hours;\r\n            }\r\n             else if(x.Username==='Wesley'){\r\n                newest.Wesley = x.Hours;\r\n            }\r\n            else if(x.Username==='Stephen'){\r\n                newest.Stephen = x.Hours;\r\n            }\r\n            else if(x.Username==='Gavin'){\r\n                newest.Gavin = x.Hours;\r\n            }\r\n            else if(x.Username==='Neil'){\r\n                newest.Neil = x.Hours;\r\n            }\r\n        })\r\n        //console.log(newest);\r\n    })\r\n\r\n    dataArray.push(newest);\r\n\r\n    //console.log(dataArray);\r\n    return dataArray;\r\n    \r\n}\r\n\r\nclass CustomizedAxisTick extends PureComponent {\r\n    render() {\r\n      const { x, y, stroke, payload } = this.props;\r\n  \r\n      return (\r\n        <g transform={`translate(${x},${y})`}>\r\n          <text x={0} y={0} dy={5} textAnchor=\"start\" fill=\"#666\" transform=\"rotate(90)\">\r\n            {payload.value}\r\n          </text>\r\n        </g>\r\n      );\r\n    }\r\n  }\r\n\r\nfunction Schedule() {\r\n\r\n    const[ graphData, setGraphData ] = useState([]);\r\n    const [loading, setLoading ] = useState(false)\r\n    \r\n    useEffect(() => {\r\n        setLoading(true);\r\n        let data = [];\r\n        let weekCount = [0, 7, 14, 21, 28, 35, 42, 49, 56, 63];\r\n\r\n        for(let i=0; i<weekCount.length; i++) {\r\n            //data = pushNewWeek(data, i+1, weekCount[i]);\r\n            setGraphData(pushNewWeek(data, i+1, weekCount[i]));\r\n            \r\n        }\r\n        //console.log(data);\r\n        //setGraphData(data);\r\n        setTimeout(() => {\r\n            setLoading(false);\r\n          }, 3000);\r\n    }, [])\r\n    \r\n    let chartLoaded;\r\n\r\n    if(loading===false) {\r\n        \r\n          chartLoaded = <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                        <BarChart width={1600} height={700} data={graphData}>\r\n                            <CartesianGrid  />\r\n                            <XAxis dataKey=\"Week\" height={60} interval={0}  label={{ value: 'Week Starting on:', angle: 0, position: 'outsideLeft' }}/>\r\n                            <YAxis  label={{ value: 'Hours', angle: -90, position: 'insideLeft' }}/>\r\n                            <Tooltip />\r\n                            <Legend />\r\n                                <Bar dataKey=\"Richard\" fill=\"#ff3c2e\" />\r\n                                <Bar dataKey=\"Wesley\" fill=\"#dbbe00\" />\r\n                                <Bar dataKey=\"Stephen\" fill=\"#2eff35\" />\r\n                                <Bar dataKey=\"Gavin\" fill=\"#2e9dff\" />\r\n                                <Bar dataKey=\"Neil\" fill=\"#202c40\" />\r\n                        </BarChart> \r\n          </ResponsiveContainer>\r\n  \r\n      } else {\r\n        chartLoaded = \r\n        <div className=\"bar-chart-wrap spinner\">\r\n          <TailSpin color=\"#282c34\" height={200} width={200} ariLabel='Loading'/>\r\n        </div>\r\n      }\r\n  \r\n\r\n    return(\r\n        <div className=\"main\">\r\n\r\n            {chartLoaded}    \r\n        \r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Schedule;","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Reports, Closed, ReportMenu, Schedule } from \"./components1\";\r\nimport './Report1.css'\r\n\r\nfunction Report1() {\r\n    document.title = 'HQ Business - Reports';\r\n    return (\r\n        <div className=\"Report1\">\r\n          \r\n          <Router>\r\n            <ReportMenu />\r\n            <Switch>\r\n             \r\n              <Route path=\"/Report1\" exact component={() => <Reports />} />\r\n              <Route path=\"/Report1/Closed\" exact component={() => <Closed />} />\r\n              <Route path=\"/Report1/Schedule\" exact component={() => <Schedule />} />\r\n             \r\n            </Switch>\r\n          </Router>\r\n        </div>\r\n\r\n      );\r\n}\r\n\r\nexport default Report1;","import React, {  useState, useEffect, useCallback } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport './alerts.css';\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport moment from 'moment'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\n\r\nimport { AiOutlineFlag } from 'react-icons/ai'\r\n\r\n\r\n\r\n//ReactDataGrid.io used for main grid\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\nimport '@inovua/reactdatagrid-community/base.css'\r\nimport '@inovua/reactdatagrid-community/index.css'\r\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\r\n\r\nconst returnErrors = (code) => {\r\n    return fetch('/returnErrors/' + code).then(response => {\r\n      return response.json()\r\n    });\r\n}\r\n\r\nconst returnAlerts = () => {\r\n    return fetch('/returnAlerts').then(response => {\r\n      return response.json()\r\n    });\r\n}\r\n\r\n  //const processErrorConfirmed = (key) => {\r\n  //    const requestOptions = {\r\n  //      method: 'PUT',\r\n  //      headers: { 'Content-Type': 'application/json'},\r\n  //      body: JSON.stringify({\r\n  //        detail: key\r\n  //      })\r\n  //    }\r\n  //    return fetch('/processErrorConfirmed', requestOptions)\r\n  //  }\r\n\r\nconst getCount = (customer) => {\r\n  return fetch('/getErrorCount/'+ customer).then(response => {\r\n    return response.json()\r\n  });\r\n  \r\n}\r\n\r\n  //const processErrorReviewed = (key) => {\r\n  //  const requestOptions = {\r\n  //    method: 'PUT',\r\n  //    headers: { 'Content-Type': 'application/json'},\r\n  //    body: JSON.stringify({\r\n  //      detail: key\r\n  //    })\r\n  //  }\r\n  //  return fetch('/processErrorReviewed', requestOptions)\r\n  //}\r\n\r\n  const processErrors = (details, status) => {\r\n    const string = JSON.stringify(details)\r\n    \r\n    const requestOptions = {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        Details: string,\r\n        Status: status\r\n      })\r\n    }\r\n    return fetch('/processErrors', requestOptions)\r\n  }\r\n\r\n  const submitErrors = (status, selected) => {\r\n    //console.log(selected);\r\n    let detailsArray = [];\r\n    Object.keys(selected).forEach(function(key) {\r\n        //console.log(key);\r\n        detailsArray.push(key);\r\n    })\r\n    //console.log(detailsArray);\r\n    processErrors(detailsArray, status);\r\n}\r\n\r\nfunction Errors() {\r\n  document.title = 'HQ Business - Errors';\r\n\r\n    const [errorList, setErrorList] = useState([]);\r\n    const [currentCustomer, setCurrentCustomer] = useState({});\r\n    const [customers, setCustomers] = useState([]);\r\n    const [count, setCount] = useState();\r\n\r\n\r\n    //const history= useHistory();\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        //console.log(JSON.parse(localStorage.getItem('CustomerErrorCheck')).CustomerCode);\r\n        let count=0\r\n        if (count=0) {\r\n            returnErrors(JSON.parse(localStorage.getItem('CustomerErrorCheck')).CustomerCode).then((data) => {\r\n              if(mounted) {\r\n                  setErrorList(data);   \r\n              }       \r\n          });\r\n\r\n          returnAlerts()\r\n              .then(customers => {\r\n                if(mounted) {\r\n                  setCustomers(customers)\r\n                }\r\n              })\r\n\r\n            getCount(JSON.parse(localStorage.getItem('CustomerErrorCheck')).CustomerCode).then((x) => {\r\n              //console.log(x[0][\"\"]);\r\n              setCount(x[0][\"\"]);\r\n            });\r\n\r\n\r\n          //console.log(customers);\r\n\r\n          setCurrentCustomer(JSON.parse(localStorage.getItem('CustomerErrorCheck')));\r\n          count = count+1;\r\n        }\r\n        else {\r\n            returnErrors(currentCustomer.CustomerCode).then((data) => {\r\n              if(mounted) {\r\n                  setErrorList(data);   \r\n              }       \r\n            });\r\n          \r\n            returnAlerts()\r\n                .then(customers => {\r\n                  if(mounted) {\r\n                    setCustomers(customers)\r\n                  }\r\n                })\r\n              \r\n            getCount(currentCustomer.CustomerCode).then((x) => {\r\n                //console.log(x[0][\"\"]);\r\n                setCount(x[0][\"\"]);\r\n            });\r\n\r\n            //console.log(customers);\r\n          }\r\n        return () => mounted = false;\r\n        //console.log(currentCustomer);\r\n    }, [currentCustomer]);\r\n\r\n    const reLoadGrid = (customer) => {\r\n      //console.log(\"HELLO THERE!\");  \r\n      returnErrors(customer.CustomerCode).then((data) => {\r\n                setErrorList(data);         \r\n      });\r\n\r\n      getCount(customer.CustomerCode).then((x) => {\r\n          //console.log(x[0][\"\"]);\r\n          setCount(x[0][\"\"]);\r\n          if (x[0][\"\"]===0) {\r\n            setCurrentCustomer(AllCustomers);\r\n          }\r\n      });\r\n      \r\n    }\r\n\r\n    const columns = [\r\n        {name: 'Customer_Name', header: 'Customer', type: 'string', defaultFlex: 1},\r\n        {name: 'Details', header: 'Details', type: 'string', defaultFlex: 9},\r\n        //{name: 'Status', header: 'Status', maxWidth:75, type: 'string'},\r\n        {name: 'ErrorDate', header: 'Error Date', type: 'string', defaultFlex: 1,\r\n            sort: (a, b) => {\r\n                a = moment(a, 'DD/MM/YYYY, HH:mm:ss', true).format();\r\n                b = moment(b, 'DD/MM/YYYY, HH:mm:ss', true).format();\r\n    \r\n                return new Date(a) - new Date(b);\r\n            }\r\n        },\r\n        {name: 'UploadDate', header: 'Upload Date', type: 'string', defaultFlex: 1,\r\n            sort: (a, b) => {\r\n                a = moment(a, 'DD/MM/YYYY, HH:mm:ss', true).format();\r\n                b = moment(b, 'DD/MM/YYYY, HH:mm:ss', true).format();\r\n    \r\n                return new Date(a) - new Date(b);\r\n            }\r\n        }\r\n    ]\r\n\r\n    const gridStyle = { height: '100%' }\r\n    const theme = 'default-dark'\r\n\r\n    //Sets data for the rows that are checked\r\n  const [selected, setSelected] = useState({});\r\n\r\n    const onSelectionChange = useCallback(({ selected }) => {\r\n        if(selected!==true){\r\n          setSelected(selected);\r\n        }\r\n    \r\n        //console.log(JSON.stringify(toArray(selected)));\r\n        //console.log(selected)\r\n          \r\n      }, [])\r\n\r\n    const [showPrompt, setShowPrompt] = useState(false);\r\n    const handleClosePrompt = () => {\r\n      setShowPrompt(false);\r\n      setSelected({});\r\n      setTimeout(()=> {\r\n        reLoadGrid(currentCustomer);\r\n        returnAlerts()\r\n          .then(customers => {\r\n              setCustomers(customers)\r\n          })\r\n      }, 500)\r\n    }\r\n\r\n//    const confirmErrors = () => {\r\n//        Object.keys(selected).forEach(function(key) {\r\n//            //console.log(key);\r\n//            processErrorConfirmed(key);\r\n//        })\r\n//\r\n//        handleClosePrompt();\r\n//    }\r\n//\r\n//    const reviewErrors = () => {\r\n//      Object.keys(selected).forEach(function(key) {\r\n//          //console.log(key);\r\n//          processErrorReviewed(key);\r\n//      })\r\n//\r\n//      handleClosePrompt();\r\n//  }\r\n\r\n \r\n\r\n  //Allows button to be pressed when some tasks are selected\r\n  let editIsDisabled = true;\r\n  if(JSON.stringify(selected).length<3) {\r\n    //console.log(selected);\r\n    editIsDisabled = true;\r\n  } else {\r\n    editIsDisabled = false;\r\n  }\r\n  //----------//\r\n\r\n\r\n  const AllCustomers = {\r\n    CustomerCode: 0,\r\n    Customer_Name: \"All Errors\",\r\n    ErrorCount: 0\r\n  }\r\n\r\n    return(\r\n        <>\r\n        <div className='errors'>\r\n        <div className=\"top-row\">\r\n\r\n        <div className=\"first-item\">\r\n          <h3>Total Errors: {count}</h3>\r\n          <OverlayTrigger key='Make-Urgent' placement='bottom'\r\n              overlay={\r\n                <Tooltip id='tooltip-pdf'>\r\n                  Flag Selected Errors\r\n                </Tooltip>\r\n              }\r\n            >\r\n        <Button variant =\"secondary\"  \r\n          onClick={() => {\r\n            setShowPrompt(true);\r\n          }}\r\n          disabled={editIsDisabled}\r\n          className='button-to-the-right'\r\n          >\r\n              <AiOutlineFlag />\r\n        </Button>\r\n        </OverlayTrigger>\r\n        </div>\r\n        \r\n        <div className=\"third-item\">\r\n          <Form.Control as=\"select\" value={JSON.stringify(currentCustomer)} \r\n                onChange = {e=> {\r\n                    setCurrentCustomer(JSON.parse(e.target.value));\r\n                    //console.log(JSON.parse(e.target.value));\r\n                    reLoadGrid(JSON.parse(e.target.value));\r\n                }}>\r\n              <option value={JSON.stringify(AllCustomers)}>{AllCustomers.Customer_Name}</option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.Customer_Name}</option>)\r\n                    })\r\n                }\r\n              </Form.Control>\r\n        </div>\r\n\r\n        </div>\r\n        \r\n            \r\n\r\n              <ReactDataGrid \r\n                idProperty=\"Details\"\r\n                columns={columns}\r\n                dataSource={errorList}\r\n                style={gridStyle}\r\n                theme={theme}\r\n                selected={selected}\r\n                checkboxColumn\r\n                onSelectionChange={onSelectionChange}\r\n                editable={true}\r\n              />\r\n\r\n\r\n\r\n\r\n        \r\n\r\n            \r\n       \r\n        </div>\r\n        <Modal show={showPrompt} onHide={handleClosePrompt}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Flag Errors</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>How do you want to flag the selected Errors?</Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClosePrompt}>\r\n                Cancel\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={ () => {\r\n                submitErrors('R', selected);\r\n                handleClosePrompt();\r\n              }}>\r\n                Reviewed\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={ () => {\r\n                submitErrors('C', selected);\r\n                handleClosePrompt();\r\n              }}>\r\n                Confirmed\r\n              </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default Errors;","import React, {useState} from 'react'\r\n\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nimport {RiFileAddLine} from \"react-icons/ri\"\r\n\r\nconst newUpdateID = () => {\r\n  return fetch('/newUpdateId').then(response => {\r\n    return response.json()\r\n  });\r\n}\r\n\r\nfunction addUpdateHeader(username, version, productID) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      Username: username,\r\n      Version: version,\r\n      ProductID: productID\r\n    })\r\n  }\r\n  return fetch('/addUpdateHeader/', requestOptions)\r\n   \r\n}\r\n\r\nfunction addUpdateDetail(updateId, details, comment) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      UpdateId: updateId,\r\n      Details: details,\r\n      Comment: comment\r\n    })\r\n  }\r\n  return fetch('/addUpdateDetail/', requestOptions)\r\n   \r\n}\r\n\r\nfunction addUpdateSQL(updateId, sql) {\r\n  const requestOptions = {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({\r\n      UpdateId: updateId,\r\n      Sql: sql\r\n    })\r\n  }\r\n  return fetch('/addUpdateSQL/', requestOptions)\r\n   \r\n}\r\n\r\nfunction NewVersion (props) {\r\n\r\n  //----- GET CURRENT USER -----//\r\n  const tokenString = sessionStorage.getItem('token');\r\n  const userToken = JSON.parse(tokenString);\r\n  const Username = userToken.username;\r\n  //const UserID = userToken.userId;\r\n\r\n  let isDisabled = true;\r\n  if(props.product.ProductID!==null){\r\n    isDisabled = false;\r\n  }\r\n \r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const [version, setVersion] = useState(\"\");\r\n    const [details, setDetails] = useState(\"\");\r\n    const [sql, setSQL] = useState(\"\");\r\n    const [comment, setComment] = useState(\"\");\r\n\r\n    const handleClose= () => {\r\n      setShow(false);\r\n      setVersion(\"\");\r\n      setDetails(\"\");\r\n      setSQL(\"\");\r\n      setComment(\"\");\r\n\r\n      \r\n    }\r\n\r\n    const onSubmit = () => {\r\n      newUpdateID().then(id=> {\r\n          //console.log(id.[0].[\"\"]);\r\n        addUpdateHeader(Username, version, props.product.ProductID).then( ()=> {\r\n          addUpdateDetail(id[0][\"\"], details, comment).then( ()=> {\r\n            addUpdateSQL(id[0][\"\"], sql).then( () => {\r\n              props.reLoad(props.product);\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      handleClose();\r\n      \r\n    }\r\n\r\n    return(\r\n        <>\r\n        <OverlayTrigger key='NewVersion' placement='bottom'\r\n          overlay={\r\n            <Tooltip id='tooltip-newversion'>\r\n              New Version\r\n            </Tooltip>\r\n          }\r\n        >\r\n        <Button variant=\"secondary\" style={{margin:5}} \r\n      \tonClick={ () => {\r\n          setShow(true);  \r\n          setTimeout(() => {\r\n            document.getElementById('newVersionInput').focus();\r\n          }, 20);\r\n        }}\r\n        className=\"button-to-the-left\"\r\n        disabled={isDisabled}\r\n        >\r\n           <RiFileAddLine/>\r\n        </Button>\r\n        </OverlayTrigger>\r\n\r\n\r\n        <Modal show={show} onHide={handleClose} size='lg'>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>New Version - {props.product.ProductName} </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          \r\n          \r\n          <Form>\r\n          <Row>\r\n            <Col xs={2}>\r\n              <h7>Version:</h7>\r\n            </Col>\r\n            <Col> \r\n              <Form.Group className=\"mb-3\" controlId=\"newVersionInput\">\r\n                <Form.Control \r\n                style={{display:'inline'}}\r\n                size=\"sm\"\r\n                as=\"textarea\" \r\n                rows={1}\r\n                type=\"text\"\r\n                value={version}\r\n                onChange = {e=> setVersion(e.target.value)}\r\n                controlId=\"newVersionInput\"\r\n              />\r\n              </Form.Group> \r\n              \r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Details\">\r\n                <h7>Description:</h7>\r\n                <Form.Control \r\n                  as=\"textarea\" \r\n                  rows={3} \r\n                  placeholder=\"Add Decription...\"\r\n                  value={details}\r\n                  onChange = {e=> setDetails(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"sm\"\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          <Row>  \r\n            <Col>\r\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Notes\">\r\n                <h7>SQL:</h7>\r\n                <Form.Control \r\n                  as=\"textarea\" \r\n                  rows={3} \r\n                  placeholder=\"Add SQL...\"\r\n                  value={sql}\r\n                  onChange = {e=> setSQL(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"sm\"\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          <Row>  \r\n            <Col>\r\n              <Form.Group className=\"mb-3\" controlId=\"newTask.Notes\">\r\n                <h7>Comment:</h7>\r\n                <Form.Control \r\n                  as=\"textarea\" \r\n                  rows={3} \r\n                  placeholder=\"Add Comment...\"\r\n                  value={comment}\r\n                  onChange = {e=> setComment(e.target.value)}\r\n                  type=\"text\"\r\n                  size=\"sm\"\r\n                />\r\n              </Form.Group>\r\n            </Col>\r\n          </Row>\r\n          </Form>\r\n    \r\n        </Modal.Body>\r\n        <Modal.Footer>          \r\n          <Button variant=\"secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={()=>{\r\n            onSubmit();\r\n            handleClose();\r\n          }}>\r\n            Create Version\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default NewVersion;","import React, {useState, useEffect} from 'react'\r\n\r\n//ReactDataGrid.io used for main grid\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\nimport '@inovua/reactdatagrid-community/base.css'\r\nimport '@inovua/reactdatagrid-community/index.css'\r\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport moment from 'moment'\r\n\r\nimport './products.css'\r\nimport NewVersion from './NewVersion.jsx';\r\n\r\nconst returnProductGrid = (id) => {\r\n    return fetch('/returnProductGrid/' + id).then(response => {\r\n      return response.json()\r\n    });\r\n}\r\n\r\nconst returnProductList = () => {\r\n    return fetch('/returnProductList').then(response => {\r\n      return response.json()\r\n    });\r\n}\r\n\r\n\r\n\r\nfunction Products  () {\r\n    document.title = 'HQ Business - Products';\r\n\r\n    const noSelected = {\r\n        MailingList: \"\",\r\n        ProductID: null,\r\n        ProductName: \"Select a Product\",\r\n        ProductURL: \"\"\r\n    }\r\n\r\n    const [dataSource, setDataSource] = useState({});\r\n    const [currentProduct, setCurrentProduct] = useState(noSelected);\r\n    const [products, setProducts] = useState([]);\r\n\r\n\r\n    const onChangeSelect = (product) => {\r\n        returnProductGrid(product.ProductID).then((data) => {\r\n                setDataSource(data);         \r\n        });\r\n        //console.log(products);\r\n    }\r\n\r\n    const reLoadGrid = (product) => {\r\n        \r\n        returnProductGrid(product.ProductID).then((data) => {\r\n                setDataSource(data);         \r\n        });\r\n        //console.log(dataSource);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        \r\n        returnProductList().then((data) => {\r\n            if(mounted) {\r\n                setProducts(data);   \r\n            }       \r\n        });        \r\n        return () => mounted = false;\r\n        \r\n    }, []);\r\n\r\n    const columns = [\r\n        {name: 'Datetime', header: 'Date', type: 'string', defaultFlex: 1,\r\n            sort: (a, b) => {\r\n                a = moment(a, 'DD/MM/YYYY', true).format();\r\n                b = moment(b, 'DD/MM/YYYY', true).format();\r\n    \r\n                return new Date(a) - new Date(b);\r\n            }\r\n        },\r\n        {name: 'Version', header: 'Version', type: 'string', defaultFlex: 1},\r\n        {name: 'Username', header: 'User', type: 'string' , defaultFlex: 1},\r\n        {name: 'UpdateDesc', header: 'Description', type: 'string', minWidth:1255 , defaultFlex: 1}\r\n    ]\r\n    const gridStyle = { minHeight:750, margin:10 }\r\n    const theme = 'default-dark'\r\n    //const defaultSortInfo = { name: 'Version', dir: -1 }\r\n\r\n    return(\r\n        <>\r\n        <div className='Products'>\r\n            <Row size='xs'>\r\n                <Col>\r\n                    <NewVersion product={currentProduct} reLoad={reLoadGrid}/>\r\n                </Col>\r\n                <Col>\r\n                <h3>{currentProduct.ProductName}</h3>\r\n                </Col>\r\n                <Col>\r\n                <h6 className='productURL'><a href={currentProduct.ProductURL}>{currentProduct.ProductURL}</a></h6>\r\n                </Col>\r\n                <Col>\r\n                </Col>\r\n                <Col >\r\n                    <Form.Control as=\"select\" value={JSON.stringify(currentProduct)} style={{ display:'inline', margin:5, width:400}}\r\n                        onChange = {e=> {\r\n                            setCurrentProduct(JSON.parse(e.target.value));\r\n                            //console.log(e.target.value);\r\n                            onChangeSelect(JSON.parse(e.target.value));\r\n                        }}>\r\n                        <option key={0} value={JSON.stringify(noSelected)}>{noSelected.ProductName}</option>\r\n                        {\r\n                          products.map((product, index) => {\r\n                              return(<option key={index} value={JSON.stringify(product)}>{product.ProductName}</option>)\r\n                            })\r\n                        }\r\n                    </Form.Control>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <ReactDataGrid \r\n                    idProperty=\"id\"\r\n                    columns={columns}\r\n                    dataSource={dataSource}\r\n                    style={gridStyle}\r\n                    theme={theme}\r\n                    editable={true}\r\n                    //defaultSortInfo={defaultSortInfo}\r\n                />\r\n            </Row>\r\n            \r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Products;","import React, { useEffect, useState } from 'react'\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger'\r\nimport Tooltip from 'react-bootstrap/Tooltip'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Form from 'react-bootstrap/Form'\r\nimport {FiEdit} from \"react-icons/fi\"\r\nimport './Customers.css'\r\n\r\nasync function returnCustomers() {\r\n    const response = await fetch('/returnCustomers');\r\n    const customers = await response.json();\r\n    return customers\r\n} \r\n\r\nconst resetCustomerList = () =>{\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json'},\r\n    }\r\n\r\n    return fetch('/resetCustomerList', requestOptions)\r\n}\r\n\r\nconst updateCustomerList = (list) =>{\r\n    //console.log(list);\r\n    //Update Web_List_Placement' values from 'list'\r\n    \r\n\r\n    const requestOptions = {\r\n        method: 'PUT',\r\n        headers: { 'Content-Type': 'application/json'},\r\n        body: JSON.stringify({\r\n            one: list[0].Customer_Code,\r\n            two: list[1].Customer_Code,\r\n            three: list[2].Customer_Code,\r\n            four: list[3].Customer_Code,\r\n            five: list[4].Customer_Code,\r\n            six: list[5].Customer_Code,\r\n            seven: list[6].Customer_Code,\r\n            eight: list[7].Customer_Code,\r\n            nine: list[8].Customer_Code,\r\n            ten: list[9].Customer_Code\r\n        })\r\n      }\r\n    \r\n      //console.log(requestOptions);\r\n      return fetch('/updateCustomerList', requestOptions)\r\n}\r\n\r\nconst EditList = React.memo(props => {\r\n    const [show, setShow] = useState(false);\r\n    const [list, setList] = useState(props.list);\r\n    const [customers, setCustomers] = useState([]);\r\n\r\n    const handleShow = () => {\r\n        setShow(true);\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setList(props.list);\r\n    }\r\n\r\n    const onSubmit = () => {\r\n        handleClose();\r\n\r\n        resetCustomerList().then(()=>{\r\n            updateCustomerList(list).then(() => {\r\n                props.onChange();\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setList(props.list)\r\n        \r\n        returnCustomers()\r\n            .then(customers => {\r\n                setCustomers(customers);\r\n            })\r\n    }, [])\r\n\r\n    return(\r\n        <>\r\n\r\n        <OverlayTrigger key='MultiEdit' placement='bottom'\r\n          overlay={\r\n            <Tooltip id='tooltip-multiedit'>\r\n              Edit Customers\r\n            </Tooltip>\r\n          }\r\n        >\r\n          <Button variant=\"secondary\" style={{margin:'5px'}}\r\n      \tonClick={ () => {\r\n          handleShow();\r\n          //props.onClick();\r\n        }}\r\n        className=\"button-to-the-left\"\r\n        //disabled={editIsDisabled}\r\n        >\r\n        <FiEdit/>\r\n        </Button>\r\n        </OverlayTrigger>\r\n\r\n\r\n        <Modal show={show} onHide={handleClose}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>Update Selected Customers</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <div className=\"modal-wrapper\">\r\n            <div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>1: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\"  style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[0] = {\r\n                        Web_List_Placement : 1,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }\r\n                }}>\r\n                  <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div>\r\n            <div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>2: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[1] = {\r\n                        Web_List_Placement : 2,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }\r\n                }}>\r\n                    <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div><div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>3: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[2] = {\r\n                        Web_List_Placement : 3,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }          \r\n                }}>\r\n                    <option></option>              \r\n                {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div><div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>4: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[3] = {\r\n                        Web_List_Placement : 4,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }         \r\n                }}>\r\n              <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div><div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>5: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[4] = {\r\n                        Web_List_Placement : 5,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }             \r\n                }}>\r\n                <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div><div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>6: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[5] = {\r\n                        Web_List_Placement : 6,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }             \r\n                }}>\r\n                <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div><div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>7: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[6] = {\r\n                        Web_List_Placement : 7,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }           \r\n                }}>\r\n                \r\n                <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div><div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>8: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[7] = {\r\n                        Web_List_Placement : 8,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }                \r\n                }}>\r\n                <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div><div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>9: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[8] = {\r\n                        Web_List_Placement : 9,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }             \r\n                }}>\r\n                <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div><div className=\"item-row\">\r\n            <div className=\"left-col\">\r\n            <Form.Label>10: </Form.Label>\r\n            </div>\r\n            <div className=\"right-col\">\r\n            <Form.Control as=\"select\" style={{display:'inline', margin:5}}\r\n                onChange = {e=> {        \r\n                    let value = JSON.parse(e.target.value);                \r\n                    list[9] = {\r\n                        Web_List_Placement : 10,\r\n                        Customer_Code : value.Customer_Code,\r\n                        Customer_Name : value.CustomerName\r\n                    }              \r\n                }}>\r\n                <option></option>\r\n              {\r\n                  customers.map((customer, index) => {\r\n                      return(<option key={index} value={JSON.stringify(customer)}>{customer.CustomerName}</option>)\r\n                    })\r\n                }\r\n            </Form.Control>\r\n            </div>\r\n            </div>\r\n            </div>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          {/*<Button variant=\"secondary\" onClick={handleClose}>\r\n            Cancel\r\n            </Button>*/}\r\n          <Button variant=\"primary\" onClick={onSubmit}>\r\n            Save Changes\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      </>\r\n    )\r\n});\r\n\r\nexport default EditList;","import React, { useEffect, useState } from 'react';\r\nimport './Customers.css';\r\n\r\n//ReactDataGrid.io used for main grid\r\nimport ReactDataGrid from '@inovua/reactdatagrid-community'\r\nimport '@inovua/reactdatagrid-community/base.css'\r\nimport '@inovua/reactdatagrid-community/index.css'\r\nimport '@inovua/reactdatagrid-community/theme/default-dark.css'\r\n\r\nimport EditList from './EditList';\r\n\r\nconst getTopSupport = () => {\r\n    return fetch('/getTopSupportCustomers').then(response => {\r\n      return response.json()\r\n    });\r\n}\r\nconst getTopSelected = () => {\r\n    return fetch('/getTopSelectedCustomers').then(response => {\r\n      return response.json()\r\n    });\r\n}\r\n\r\n\r\nfunction Customers  () {\r\n\r\n    const [customerSupportData, setCustomerSupportData] = useState({});\r\n    const [selectedCustomers, setSelectedCustomers] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n\r\n    const gridStyle = { minHeight:500, margin:10 }\r\n\r\n    const supportColumns = [\r\n        {name: 'Customer_Name', header: 'Customer', type: 'string', defaultFlex: 5},\r\n        {name: 'SupportTime', header: 'Support (Mins)', type: 'number', defaultFlex: 1}\r\n    ]\r\n\r\n    const selectedColumns = [\r\n        {name: 'Web_List_Placement', header: '#', type: 'number', defaultFlex: 1},\r\n        {name: 'Customer_Name', header: 'Customer', type: 'string', defaultFlex: 8}\r\n    ]\r\n\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getTopSupport().then(data => {\r\n            setCustomerSupportData(data);\r\n        })\r\n        getTopSelected().then(data => {\r\n            setSelectedCustomers(data);\r\n            setLoading(false);\r\n        })\r\n        \r\n    }, [])\r\n\r\n    //----- GET CURRENT USER -----//\r\n    const tokenString = sessionStorage.getItem('token');\r\n    const userToken = JSON.parse(tokenString);\r\n    //const Username = userToken.username;\r\n    const UserID = userToken.userId;\r\n\r\n    const update = () => {\r\n        setLoading(true);\r\n        getTopSelected().then(data => {\r\n            setSelectedCustomers(data);\r\n            setLoading(false);\r\n        })\r\n    }\r\n\r\n    let Button1 = <div/>\r\n    if(UserID===1 | UserID===2 | UserID===6){\r\n        console.log(selectedCustomers)\r\n        if(loading===false){\r\n            Button1 = <EditList list={selectedCustomers} onChange={update}/>;\r\n        }\r\n    }\r\n    return(\r\n        <>\r\n        <div className=\"wrapper\">\r\n            <div className=\"top-row\">\r\n                {\r\n                    Button1\r\n                }\r\n            </div>\r\n            <div className=\"grids\">\r\n                <div className=\"item top-cust\">\r\n                <h4 class=\"font-weight-light heading item\" >Top Customers:</h4>\r\n                    <ReactDataGrid \r\n                    idProperty=\"Customer_Code\"\r\n                    columns={selectedColumns}\r\n                    dataSource={selectedCustomers}\r\n                    style={gridStyle}\r\n                    theme={'default-dark'}\r\n                    />\r\n                </div>\r\n                <div className=\"item top-supp\">\r\n                <h4 class=\"font-weight-light heading item\" >Time for Support in the Last Month:</h4>\r\n                    <ReactDataGrid \r\n                    idProperty=\"CustomerCode\"\r\n                    columns={supportColumns}\r\n                    dataSource={customerSupportData}\r\n                    style={gridStyle}\r\n                    theme={'default-dark'}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Customers;","export default __webpack_public_path__ + \"static/media/HQicon.9e6c548a.ico\";","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Login.css';\r\n\r\nimport Footer from './../Footer.jsx'\r\n\r\nimport HQicon from './HQicon.ico'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nasync function loginUser(credentials) {\r\n  return fetch('/login', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify(credentials)\r\n  })\r\n    .then(data => data.json())\r\n}\r\n\r\nexport default function Login({ setToken }) {\r\n  const [username, setUserName] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleSubmit = async e => {\r\n    checkDueDate();\r\n\r\n    \r\n    e.preventDefault();\r\n    const token = await loginUser({\r\n        username,\r\n        password\r\n    });\r\n    \r\n    \r\n    if(token.token!=='q>)*8n[TfhTyZAW'){  \r\n      alert('Invalid Username/Password');\r\n    } else{\r\n      setToken(token);\r\n    }\r\n     \r\n    \r\n  }\r\n\r\n  const checkDueDate = () =>{\r\n    //console.log(\"checkDueDate Method\");\r\n    const requestOptions = {\r\n      method: 'PUT',\r\n      headers: { 'Content-Type': 'application/json'}\r\n    }\r\n    return fetch('/checkDueDate/', requestOptions)  \r\n  }\r\n  \r\n  return(\r\n    <>\r\n    \r\n    \r\n    <div className=\"login-logo\"><img src={HQicon} alt=\"logo\" /></div>\r\n    <div className=\"login-wrapper\">\r\n      <h2>HQ Business - Log In</h2>\r\n      <Form>\r\n        <Form.Group className=\"mb-3\" controlId=\"emailInput\">\r\n          <Form.Label>User:</Form.Label>\r\n          <Form.Control type=\"email\" placeholder=\"Enter username\" onChange={e => setUserName(e.target.value)}/>\r\n        </Form.Group>\r\n        <Form.Group className=\"mb-3\" constrolId=\"passwordInput\">\r\n          <Form.Label>Password:</Form.Label>\r\n          <Form.Control type=\"password\" placeholder=\"Password\" onChange={e => setPassword(e.target.value)} />\r\n        </Form.Group>\r\n        <Button variant=\"secondary\" type=\"submit\" onClick={handleSubmit} className=\"button-to-the-right\">\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n    </div>\r\n\r\n    <Footer />\r\n    </>\r\n  )\r\n\r\n  \r\n}\r\n\r\nLogin.propTypes = {\r\n    setToken: PropTypes.func.isRequired\r\n}","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport { Navigation, Tasks, Footer, Report1, QuickSupport, Errors, Products, Customers } from \"./components\";\r\nimport useToken from './useToken.js';\r\nimport Login from './components/Login/Login'\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n  \r\n  const { token, setToken } = useToken();\r\n  \r\n  if(token && token!=='q>)*8n[TfhTyZAW') {\r\n    //console.log(\"HI THERE\");\r\n    alert(\"Invalid Log-in Token\");\r\n    localStorage.removeItem('token');\r\n  }\r\n  \r\n  \r\n  if(!token) {\r\n    return <Login setToken={setToken} />\r\n  }\r\n  \r\n  \r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Navigation />\r\n          <div className=\"main-wrapper\">\r\n            <Switch>\r\n              <Route path=\"/\" exact component={() => <Tasks />} />\r\n              <Route path=\"/Report1\" exact component={() => <Report1 />} />\r\n              <Route path=\"/Support\" exact component={() => <QuickSupport />} />\r\n              <Route path=\"/Products\" exact component={() => <Products />} />\r\n              <Route path=\"/Errors\" exact component={() => <Errors />} />\r\n              <Route path=\"/Customers\" exact component={() => <Customers />} />\r\n            </Switch>\r\n          </div>\r\n        <Footer /> \r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\nexport default App;","import { useState } from 'react';\r\n\r\nexport default function useToken() {\r\n    const getToken = () => {\r\n        const tokenString = sessionStorage.getItem('token');\r\n        const userToken = JSON.parse(tokenString);\r\n        return userToken?.token\r\n    };\r\n    \r\n    const [token, setToken] = useState(getToken());\r\n\r\n    const saveToken = userToken => {\r\n        sessionStorage.setItem('token', JSON.stringify(userToken));\r\n        setToken(userToken.token);\r\n    };\r\n\r\n    return {\r\n        setToken: saveToken,\r\n        token\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n\n"],"sourceRoot":""}